"use strict";(self.webpackChunkpioreactor=self.webpackChunkpioreactor||[]).push([[4066],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var o=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),c=i,g=d["".concat(p,".").concat(c)]||d[c]||m[c]||r;return n?o.createElement(g,a(a({ref:t},u),{},{components:n})):o.createElement(g,a({ref:t},u))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<r;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2019:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var o=n(87462),i=(n(67294),n(3905));const r={title:"Working with plugins",slug:"/intro-plugins"},a=void 0,l={unversionedId:"Plugins/intro-plugins",id:"Plugins/intro-plugins",title:"Working with plugins",description:"Pioreactor plugins are a way to distribute code to others (or yourself), and avoid having to use the command line each time you invoke your custom code - you should be able to just use the web interface.",source:"@site/developer-guide/07-Plugins/01-intro-plugins.md",sourceDirName:"07-Plugins",slug:"/intro-plugins",permalink:"/developer-guide/intro-plugins",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Working with plugins",slug:"/intro-plugins"},sidebar:"tutorialSidebar",previous:{title:"Writing scripts",permalink:"/developer-guide/writing-scripts"},next:{title:"Adding your plugins to the web interface",permalink:"/developer-guide/adding-plugins-to-ui"}},p={},s=[{value:"1. Adding Python files to <code>plugins</code> folder",id:"1-adding-python-files-to-plugins-folder",level:2},{value:"Custom background jobs",id:"custom-background-jobs",level:3},{value:"Custom scripts",id:"custom-scripts",level:3},{value:"Custom automations",id:"custom-automations",level:3},{value:"2. <code>pip</code>-installable plugins",id:"2-pip-installable-plugins",level:2}],u={toc:s};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Pioreactor plugins are a way to distribute code to others (or yourself), and avoid having to use the command line each time you invoke your custom code - you should be able to just use the web interface."),(0,i.kt)("p",null,"There are two ways to distribute a plugin:"),(0,i.kt)("h2",{id:"1-adding-python-files-to-plugins-folder"},"1. Adding Python files to ",(0,i.kt)("inlineCode",{parentName:"h2"},"plugins")," folder"),(0,i.kt)("p",null,"On each Pioreactor's Raspberry Pi is a folder at ",(0,i.kt)("inlineCode",{parentName:"p"},"/home/pioreactor/.pioreactor/plugins"),". When the Pioreactor software starts, any Python files in this folder are read and loaded into memory. If you were to include an automation in here, or a background job (with the ",(0,i.kt)("inlineCode",{parentName:"p"},"click")," CLI component), they would be available globally."),(0,i.kt)("p",null,"Why would you want to distribute code this way? It's a great way to test or develop your code instead of committing to other distribution methods: short iterations times, tight feedback loop, and code runs in the production environment. Two downsides are that it's harder to distribute your code to the rest of the community, and that it doesn't have the same deployment pipeline (adding configs, etc.)"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The Pioreactor software will load and run each Python file in ",(0,i.kt)("inlineCode",{parentName:"p"},"/plugins")," on each invocation of ",(0,i.kt)("inlineCode",{parentName:"p"},"pio"),". Don't pull long-running, or blocking, code without wrapping it in a function or ",(0,i.kt)("inlineCode",{parentName:"p"},'if __name__ == "__main__"'),". For example:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"#\u274c don't do this\n# my plugin code.py\nimport time\n\ntime.sleep(100)\n")),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# \u2705 this is okay\nimport time\n\ndef sleep():\n    time.sleep(100)\n\n")),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# \u2705 also is okay\nimport time\n\nif __name__ == "__main__":\n    time.sleep(100)\n'))),(0,i.kt)("h3",{id:"custom-background-jobs"},"Custom background jobs"),(0,i.kt)("p",null,"Here's an example: place the following code into the file ",(0,i.kt)("inlineCode",{parentName:"p"},"/home/pioreactor/.pioreactor/plugins/demo_job.py")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# -*- coding: utf-8 -*-\nimport click\nfrom pioreactor.whoami import get_unit_name, get_latest_experiment_name\nfrom pioreactor.background_jobs.base import BackgroundJob\n\n__plugin_summary__ = "Just a demo job"\n__plugin_version__ = "0.0.1"\n__plugin_name__ = "Demo job"\n__plugin_author__ = "Cam Davidson-Pilon"\n__plugin_homepage__ = "https://docs.pioreactor.com"\n\n\nclass DemoJob(BackgroundJob):\n\n    job_name="demo_job"\n\n    def __init__(self, unit, experiment, **kwargs):\n        super().__init__(unit=unit, experiment=experiment)\n\n    def on_ready(self):\n        self.logger.debug("Hello, world!")\n\n    def on_disconnect(self):\n        self.logger.debug("Goodbye, world!")\n\n\n@click.command(name="demo_job", help=__plugin_summary__)\ndef click_demo_job():\n    job = DemoJob(\n        unit=get_unit_name(),\n        experiment=get_latest_experiment_name(),\n    )\n    job.block_until_disconnected()\n')),(0,i.kt)("p",null,"You should be able to execute the following from the command line now: ",(0,i.kt)("inlineCode",{parentName:"p"},"pio run demo_job"),"."),(0,i.kt)("p",null,"Finally, in your ",(0,i.kt)("a",{parentName:"p",href:"http://pioreactor.local/plugins"},"web interface under plugins"),', you should see "Demo Job" installed.'),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"/developer-guide/writing-background-jobs"},"A full introduction to writing jobs")," is available.")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"How do you add this to your /pioreactors page in the UI? See ",(0,i.kt)("a",{parentName:"p",href:"/developer-guide/adding-plugins-to-ui"},"here"),".")),(0,i.kt)("h3",{id:"custom-scripts"},"Custom scripts"),(0,i.kt)("p",null,"If you are interested in creating a Python script to control multiple jobs, like in a ",(0,i.kt)("a",{parentName:"p",href:"/user-guide/intro-python-scripting"},"previous Python scripting example"),", you can create a file called ",(0,i.kt)("inlineCode",{parentName:"p"},"example_script.py")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"/home/pioreactor/.pioreactor/plugins/")," folder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import time\nimport click\nfrom pioreactor.background_jobs.stirring import start_stirring\nfrom pioreactor.background_jobs.od_reading import start_od_reading\nfrom pioreactor.actions.led_intensity import led_intensity\nfrom pioreactor.background_jobs.temperature_control import start_temperature_control\n\n\n__plugin_summary__ = "My example script to control stirring, OD and temperature"\n__plugin_version__ = "0.0.1"\n__plugin_name__ = "Example Script"\n__plugin_author__ = "Cam Davidson-Pilon"\n__plugin_homepage__ = "https://docs.pioreactor.com"\n\n\n@click.command(name="my_script", help=__plugin_summary__) # the name field is used in the invocation `pio run X`\ndef click_my_script():\n\n    led_intensity({"B": 50})\n\n    stirrer = start_stirring(target_rpm=400)\n    od_reader = start_od_reading("90", "REF")\n    temp_controller = start_temperature_control("thermostat", target_temperature=32)\n\n    time.sleep(10)\n    stirrer.set_target_rpm(300)\n\n    stirrer.block_until_disconnected()\n\n')),(0,i.kt)("p",null,"You should be able to execute the following from the command line now: ",(0,i.kt)("inlineCode",{parentName:"p"},"pio run my_script"),". (The ",(0,i.kt)("inlineCode",{parentName:"p"},"my_script")," is from the ",(0,i.kt)("inlineCode",{parentName:"p"},"@click.command")," line, you can change it there)."),(0,i.kt)("admonition",{type:"important"},(0,i.kt)("p",{parentName:"admonition"},"The function that ",(0,i.kt)("inlineCode",{parentName:"p"},"click.command")," wraps should have it's name prepended by ",(0,i.kt)("inlineCode",{parentName:"p"},"click_"),". Ex: ",(0,i.kt)("inlineCode",{parentName:"p"},"def click_my_script")," is okay, but ",(0,i.kt)("inlineCode",{parentName:"p"},"def my_script")," is not.")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"How do you add this to your /pioreactors page in the UI? See ",(0,i.kt)("a",{parentName:"p",href:"/developer-guide/adding-plugins-to-ui"},"here"),".")),(0,i.kt)("h3",{id:"custom-automations"},"Custom automations"),(0,i.kt)("p",null,"Here's an example of adding a custom automation: place the following code into the file ",(0,i.kt)("inlineCode",{parentName:"p"},"/home/pioreactor/.pioreactor/plugins/demo_automation.py")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# -*- coding: utf-8 -*-\nfrom pioreactor.automations.dosing.base import DosingAutomationContrib\n\n__plugin_summary__ = "A demo dosing automation"\n__plugin_version__ = "0.0.1"\n__plugin_name__ = "Demo Dosing Automation"\n__plugin_author__ = "Cam Davidson-Pilon"\n__plugin_homepage__ = "https://docs.pioreactor.com"\n\nclass DemoAutomation(DosingAutomationContrib):\n\n    automation_name = "demo"\n\n    def __init__(self, volume, **kwargs):\n        super().__init__(**kwargs)\n        self.volume = volume\n\n    def execute(self):\n        self.logger("Here I would execute...")\n\n')),(0,i.kt)("p",null,"You should be able to execute the following from the command line now:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pio run dosing_control --automation-name demo --volume 10\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"/developer-guide/writing-automations-1"},"A full introduction to writing automations")," is available.")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"How do you add this to your /pioreactors page in the UI? See ",(0,i.kt)("a",{parentName:"p",href:"/developer-guide/adding-plugins-to-ui"},"here"),".")),(0,i.kt)("h2",{id:"2-pip-installable-plugins"},"2. ",(0,i.kt)("inlineCode",{parentName:"h2"},"pip"),"-installable plugins"),(0,i.kt)("p",null,"An alternative to placing Python files in the ",(0,i.kt)("inlineCode",{parentName:"p"},"plugins")," folder is to bundle your code into a Python package that can be installed over the internet. This is the best way to ship your code to many users, and is pretty easy! We have a full guide on how to ",(0,i.kt)("a",{parentName:"p",href:"/developer-guide/plugin-as-python-package"},"create a Pioreactor Python package"),"."))}m.isMDXComponent=!0}}]);