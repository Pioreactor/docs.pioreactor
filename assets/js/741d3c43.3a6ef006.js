"use strict";(self.webpackChunkpioreactor=self.webpackChunkpioreactor||[]).push([[3866],{26229:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=t(85893),o=t(11151);const r={title:"Experiment profile schema and syntax",slug:"/experiment-profiles-schema",hide_table_of_contents:!0},i=void 0,a={id:"Extending your Pioreactor/Experiment Profiles/experiment-profiles-schema",title:"Experiment profile schema and syntax",description:"Experiment profiles are YAML files that choreograph jobs across your Pioreactor cluster. This page documents the syntax the UI validates against and the constructs available when you are editing a profile directly.",source:"@site/user-guide/03-Extending your Pioreactor/04-Experiment Profiles/10-experiment-profiles-schema.md",sourceDirName:"03-Extending your Pioreactor/04-Experiment Profiles",slug:"/experiment-profiles-schema",permalink:"/user-guide/experiment-profiles-schema",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Experiment profile schema and syntax",slug:"/experiment-profiles-schema",hide_table_of_contents:!0},sidebar:"tutorialSidebar",previous:{title:"Running and stopping experiment profiles",permalink:"/user-guide/start-stop-experiment-profiles"},next:{title:"Standard curves for OD600 readings",permalink:"/user-guide/calibrate-od600"}},d={},l=[{value:"Add profile metadata",id:"add-profile-metadata",level:2},{value:"<code>common</code> and <code>pioreactors</code> blocks",id:"common-and-pioreactors-blocks",level:2},{value:"<code>hours_elapsed</code> refers to the profile start time",id:"hours_elapsed-refers-to-the-profile-start-time",level:3},{value:"Conditionals and expressions",id:"conditionals-and-expressions",level:2},{value:"How the <code>if</code> directive works",id:"how-the-if-directive-works",level:3},{value:"How expressions work",id:"how-expressions-work",level:3},{value:"Expressions in options",id:"expressions-in-options",level:3},{value:"Expressions in the <code>common</code> block",id:"expressions-in-the-common-block",level:3},{value:"Built-in functions in expressions",id:"built-in-functions-in-expressions",level:3},{value:"Action reference",id:"action-reference",level:2},{value:"<code>start</code> and <code>stop</code>",id:"start-and-stop",level:3},{value:"<code>pause</code> and <code>resume</code>",id:"pause-and-resume",level:3},{value:"<code>update</code>",id:"update",level:3},{value:"<code>log</code>",id:"log",level:3},{value:"<code>when</code>",id:"when",level:3},{value:"<code>repeat</code>",id:"repeat",level:3},{value:"Defining top-level parameters with <code>inputs</code>",id:"defining-top-level-parameters-with-inputs",level:2},{value:"YAML syntax check and indentation tips",id:"yaml-syntax-check-and-indentation-tips",level:2},{value:"Schema reference",id:"schema-reference",level:2},{value:"Examples",id:"examples",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Experiment profiles are YAML files that choreograph jobs across your Pioreactor cluster. This page documents the syntax the UI validates against and the constructs available when you are editing a profile directly."}),"\n",(0,s.jsx)(n.h2,{id:"add-profile-metadata",children:"Add profile metadata"}),"\n",(0,s.jsx)(n.p,{children:"It's a good idea to give your profile a descriptive and unique name. This way it will be easier to find later. Also providing a detailed description will help your colleagues (and future self!) understand what the profile accomplishes."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"experiment_profile_name: stirring with different temperatures\n\nmetadata:\n  author: Cameron DP\n  description: Turn on stirring for all workers, but set the temperature to be different between them.\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"common-and-pioreactors-blocks",children:[(0,s.jsx)(n.code,{children:"common"})," and ",(0,s.jsx)(n.code,{children:"pioreactors"})," blocks"]}),"\n",(0,s.jsxs)(n.p,{children:["Any tasks in the ",(0,s.jsx)(n.code,{children:"common"})," block will execute that task for ",(0,s.jsx)(n.em,{children:"all"})," workers assigned to the current experiment. The ",(0,s.jsx)(n.code,{children:"pioreactors"})," block is where you can write tasks for specific workers. For example, you may want the stirring to be on for all Pioreactors, but you want the temperature to be different for two workers:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"common:\n  jobs:\n    stirring:\n      actions:\n        - type: start\n          hours_elapsed: 0\n\npioreactors:\n  pio001:\n    jobs:\n      temperature_automation:\n        actions:\n          - type: start\n            hours_elapsed: 0.0\n            options:\n              automation_name: thermostat\n              target_temperature: 35\n  pio002:\n    jobs:\n      temperature_automation:\n        actions:\n          - type: start\n            hours_elapsed: 0.0\n            options:\n              automation_name: thermostat\n              target_temperature: 32\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"hours_elapsed-refers-to-the-profile-start-time",children:[(0,s.jsx)(n.code,{children:"hours_elapsed"})," refers to the profile start time"]}),"\n",(0,s.jsxs)(n.p,{children:["When writing a profile, note that the ",(0,s.jsx)(n.code,{children:"hours_elapsed"})," field refers to when the experiment profile started, and not when the experiment started."]}),"\n",(0,s.jsx)(n.h2,{id:"conditionals-and-expressions",children:"Conditionals and expressions"}),"\n",(0,s.jsxs)(n.h3,{id:"how-the-if-directive-works",children:["How the ",(0,s.jsx)(n.code,{children:"if"})," directive works"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"if"})," directive can be included in any action to conditionally execute it or not. The expression is evaluated ",(0,s.jsx)(n.em,{children:"when the action is scheduled"})," (that is, after ",(0,s.jsx)(n.code,{children:"hours_elapsed"})," hours have passed since the profile started)."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"if"})," directive supports the boolean operators ",(0,s.jsx)(n.code,{children:"and"}),", ",(0,s.jsx)(n.code,{children:"or"}),", and ",(0,s.jsx)(n.code,{children:"not"}),", parentheses, the literals ",(0,s.jsx)(n.code,{children:"True"})," and ",(0,s.jsx)(n.code,{children:"False"}),", comparisons (",(0,s.jsx)(n.code,{children:"=="}),", ",(0,s.jsx)(n.code,{children:">="}),", ",(0,s.jsx)(n.code,{children:"<="}),", ",(0,s.jsx)(n.code,{children:">"}),", ",(0,s.jsx)(n.code,{children:"<"}),"), and basic arithmetic on floats (",(0,s.jsx)(n.code,{children:"+"}),", ",(0,s.jsx)(n.code,{children:"-"}),", ",(0,s.jsx)(n.code,{children:"*"}),", ",(0,s.jsx)(n.code,{children:"/"}),"). Strings must be bare words without spaces."]}),"\n",(0,s.jsx)(n.h3,{id:"how-expressions-work",children:"How expressions work"}),"\n",(0,s.jsx)(n.p,{children:"Expressions are our way to fetch dynamic data, provided from jobs, during execution of profiles. For example, the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"pio1:stirring:target_rpm >= 500\n"})}),"\n",(0,s.jsxs)(n.p,{children:["fetches the ",(0,s.jsx)(n.code,{children:"target_rpm"})," from ",(0,s.jsx)(n.code,{children:"pio1"}),"'s stirring job at execution time, compares it to ",(0,s.jsx)(n.code,{children:"500"}),", and returns true or false. You can use that inside an action:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"    stirring:\n      actions:\n        - type: update\n          hours_elapsed: 6.0\n          if: pio1:stirring:target_rpm >= 500\n          options:\n            target_rpm: 400\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can also compare against strings. For example, to stop a job if the temperature automation currently running equals ",(0,s.jsx)(n.code,{children:"thermostat"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"    temperature_automation:\n      actions:\n        - type: stop\n          hours_elapsed: 6.0\n          if: pio1:temperature_automation:automation_name == thermostat\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Many published settings are nested JSON blobs. Use ",(0,s.jsx)(n.code,{children:"."})," to index into them:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"    temperature_automation:\n      actions:\n        - type: update\n          hours_elapsed: 6.0\n          if: pio1:temperature_automation:temperature.temperature <= 30\n          options:\n            target_temperature: 32\n"})}),"\n",(0,s.jsx)(n.h3,{id:"expressions-in-options",children:"Expressions in options"}),"\n",(0,s.jsxs)(n.p,{children:["Options can interpolate expressions as well. Wrap them in ",(0,s.jsx)(n.code,{children:"${{ ... }}"})," so the parser can distinguish expressions from literal strings:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"pioreactors:\n  worker1:\n    jobs:\n      stirring:\n        actions:\n          - type: start\n            hours_elapsed: 0\n            options:\n              target_rpm: 500\n          - type: update\n            hours_elapsed: 12\n            options:\n              target_rpm: ${{ worker1:stirring:target_rpm + 50 }}\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can reference other jobs, too. The example below adjusts stirring based on optical density:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"          - type: update\n            hours_elapsed: 12\n            options:\n              target_rpm: ${{ worker1:stirring:target_rpm + worker1:od_reading:od2.od * 10 }}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"expressions-in-the-common-block",children:["Expressions in the ",(0,s.jsx)(n.code,{children:"common"})," block"]}),"\n",(0,s.jsxs)(n.p,{children:["Expressions can reference individual Pioreactors (for example ",(0,s.jsx)(n.code,{children:"worker1:stirring:target_rpm"}),"), but sometimes you want the aggregate across all workers. Use the ",(0,s.jsx)(n.code,{children:"::<job>:setting"})," syntax inside the ",(0,s.jsx)(n.code,{children:"common"})," block:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"::<job_name>:setting\n"})}),"\n",(0,s.jsx)(n.p,{children:"For example, to conditionally change the stirring RPM for all workers:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"common:\n  jobs:\n    stirring:\n      actions:\n        - type: update\n          hours_elapsed: 6\n          if: ${{ ::stirring:target_rpm <= 500 }}\n          options:\n            target_rpm: 500\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also use this syntax when building options:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"common:\n  jobs:\n    stirring:\n      actions:\n        - type: update\n          hours_elapsed: 6\n          if: ${{ ::stirring:target_rpm <= 500 }}\n          options:\n            target_rpm: ${{ ::stirring:target_rpm + 10 * ::od_reading:od2.od }}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"built-in-functions-in-expressions",children:"Built-in functions in expressions"}),"\n",(0,s.jsxs)(n.p,{children:["There are a few helper functions you can call inside ",(0,s.jsx)(n.code,{children:"${{ ... }}"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"random()"})," produces a random number between 0 and 1."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"unit()"})," returns the unit the expression is evaluated for."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"job_name()"})," returns the job the expression is evaluated for."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"experiment()"})," returns the name of the current experiment."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"action-reference",children:"Action reference"}),"\n",(0,s.jsxs)(n.h3,{id:"start-and-stop",children:[(0,s.jsx)(n.code,{children:"start"})," and ",(0,s.jsx)(n.code,{children:"stop"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"start"})," launches a job or automation, and ",(0,s.jsx)(n.code,{children:"stop"})," halts it."]}),"\n",(0,s.jsxs)(n.h3,{id:"pause-and-resume",children:[(0,s.jsx)(n.code,{children:"pause"})," and ",(0,s.jsx)(n.code,{children:"resume"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pause"})," temporarily suspends a job or automation, and ",(0,s.jsx)(n.code,{children:"resume"})," restarts it from the paused state."]}),"\n",(0,s.jsx)(n.h3,{id:"update",children:(0,s.jsx)(n.code,{children:"update"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"update"})," mutates settings on a running job. Provide the new values inside ",(0,s.jsx)(n.code,{children:"options"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"  actions:\n    - type: update\n      options:\n        volume: 0.75\n        duration: 15\n"})}),"\n",(0,s.jsx)(n.h3,{id:"log",children:(0,s.jsx)(n.code,{children:"log"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"log"})," writes a message to the event log. ",(0,s.jsx)(n.code,{children:"options.message"})," is required, and ",(0,s.jsx)(n.code,{children:"options.level"})," defaults to ",(0,s.jsx)(n.code,{children:"info"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'  actions:\n    - type: log\n      options:\n        message: "This is a message, and it can contain expressions like ${{ unit() }}."\n        level: info\n'})}),"\n",(0,s.jsx)(n.h3,{id:"when",children:(0,s.jsx)(n.code,{children:"when"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"when"})," triggers one or more actions the first time a condition becomes true. For example, start a chemostat when OD exceeds a threshold:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"common:\n  jobs:\n    od_reading:\n      actions:\n        - type: start\n    dosing_automation:\n      actions:\n        - type: when\n          condition: ${{ ::od_reading:od2.od > 2.0 }}\n          hours_elapsed: 0\n          actions:\n            - type: start\n              hours_elapsed: 0\n              options:\n                automation_name: chemostat\n                volume: 0.6\n                duration: 10\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"hours_elapsed"})," delays evaluation until the specified time. Once the condition fires, the ",(0,s.jsx)(n.code,{children:"when"})," action is exhausted and will not run again."]}),"\n",(0,s.jsx)(n.h3,{id:"repeat",children:(0,s.jsx)(n.code,{children:"repeat"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"repeat"})," loops a block of actions. It requires two fields:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"actions"}),": the actions to perform each iteration. Their ",(0,s.jsx)(n.code,{children:"hours_elapsed"})," values are relative to the start of the loop."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"repeat_every_hours"}),": how long, in hours, between iterations."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"- type: repeat\n  hours_elapsed: 6.0 # start looping after 6 hours\n  repeat_every_hours: 0.5 # run every 30 minutes\n  actions:\n    - type: update\n      hours_elapsed: 0.0\n      ...\n    - type: update\n      hours_elapsed: 0.1\n      ...\n"})}),"\n",(0,s.jsx)(n.p,{children:"Optional fields provide stricter control:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"max_hours"}),": total runtime of the loop. With ",(0,s.jsx)(n.code,{children:"repeat_every_hours: 0.5"})," and ",(0,s.jsx)(n.code,{children:"max_hours: 6"}),", the loop runs 12 times."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"while"}),": an expression evaluated at the start of each iteration. If it returns ",(0,s.jsx)(n.code,{children:"False"}),", the loop exits."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"if"}),": skip the entire ",(0,s.jsx)(n.code,{children:"repeat"})," block when the expression is ",(0,s.jsx)(n.code,{children:"False"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"A coarse turbidostat example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"add_media:\n  actions:\n    - type: repeat\n      hours_elapsed: 6.0\n      repeat_every_hours: 0.0025 # every 9 seconds\n      while: ${{ worker1:od_reading:od2.od > 3.0 }}\n      actions:\n        - type: start\n          options:\n            volume: 1\nremove_waste:\n  actions:\n    - type: repeat\n      hours_elapsed: 6.0\n      repeat_every_hours: 0.0025\n      while: ${{ worker1:od_reading:od2.od > 3.0 }}\n      actions:\n        - type: start\n          options:\n            volume: 1.5\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"defining-top-level-parameters-with-inputs",children:["Defining top-level parameters with ",(0,s.jsx)(n.code,{children:"inputs"})]}),"\n",(0,s.jsxs)(n.p,{children:["Surface key constants in an ",(0,s.jsx)(n.code,{children:"inputs"})," section so collaborators can tweak them. Use the names in expressions anywhere in the profile:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"inputs:\n  growth_phase_temp: 37.0\n  stationary_phase_temp: 30.0\n  od_threshold: 1.6\n\ncommon:\n  jobs:\n    temperature_automation:\n      actions:\n        - type: update\n          hours_elapsed: 12.0\n          if: ${{ ::od_reading:od2.od < od_threshold }}\n          options:\n            target_temperature: ${{ stationary_phase_temp }}\n        - type: update\n          hours_elapsed: 12.0\n          if: ${{ ::od_reading:od2.od >= od_threshold }}\n          options:\n            target_temperature: ${{ growth_phase_temp }}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"yaml-syntax-check-and-indentation-tips",children:"YAML syntax check and indentation tips"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Validate your YAML with a tool such as ",(0,s.jsx)(n.a,{href:"https://www.yamllint.com/",children:"https://www.yamllint.com/"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Mind indentation\u2014YAML uses spaces to convey structure. For example, only the second example below is correct:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# correct \u2705\ncommon:\n  jobs:\n    temperature_automation:\n      actions:\n        - type: start\n          hours_elapsed: 0.0\n          options:\n            automation_name: thermostat\n            target_temperature: 30\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# wrong \u274c\ncommon:\n  jobs:\n    temperature_automation:\n      actions:\n        - type: start\n          hours_elapsed: 0.0\n          options:\n          automation_name: thermostat\n          target_temperature: 30\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If you see an error such as ",(0,s.jsx)(n.code,{children:'Expected "object", got "array" at ...options'}),", make sure you are not prefixing option keys with ",(0,s.jsx)(n.code,{children:"-"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# wrong \u274c\noptions:\n  - automation_name: thermostat\n  - target_temperature: 30\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# correct \u2705\noptions:\n  automation_name: thermostat\n  target_temperature: 30\n"})}),"\n",(0,s.jsx)(n.h2,{id:"schema-reference",children:"Schema reference"}),"\n",(0,s.jsx)(n.p,{children:"The UI validates profiles against this schema and performs an additional run-time check."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# Main structure of the experiment profile\nexperiment_profile_name: <string>  # Name of the experiment profile\n\n\n# Metadata section (optional)\nmetadata:\n  author: <string>      # Author of the experiment profile\n  description: <string> # Description of the experiment profile\n\n# Plugins section (optional)\nplugins:\n  - name: <string>        # Name of the plugin\n    min_version: <string> # Minimum required version of the plugin\n\n# inputs for variables that can be used in expressions (optional)\ninputs:\n  var1: value1\n  var2: value2\n\n\n# Common jobs section (optional)\n# Jobs that are common for all Pioreactors\ncommon:\n  jobs:\n    <job_name>:\n      actions:\n        - type: <string>     # Type of action: "start", "pause", "resume", "stop", "update", "repeat", "when", or "log"\n          hours_elapsed: <float> # Time when the action is scheduled (in hours after experiment start)\n          # Options for the action (optional)\n          # If type is \'log\', a \'message\' parameter is required here\n          options:\n            <option_name>: <value>\n          # Arguments for the action (optional)\n          arguments: <list>\n\n# Pioreactors section (optional)\n# Jobs that are specific to some Pioreactors\npioreactors:\n  <pioreactor_unit_name>:\n    # Optional label for the Pioreactor\n    label: <string>\n    jobs:\n      <job_name>:\n        actions:\n          - type: <string>     # Type of action: "start", "pause", "resume", "stop", "update", "repeat", "when", or "log"\n            hours_elapsed: <float> # Time when the action is scheduled (in hours after experiment start)\n            # Optional \'if\' directive for conditional execution of actions\n            if: <string> # Can be an expression\n            # Options for the action (optional)\n            # Values can be expressions, denoted with ${{ }}\n            options:\n              <option_name>: <value>\n'})}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(n.p,{children:["See examples of experiment profiles ",(0,s.jsx)(n.a,{href:"https://github.com/Pioreactor/experiment_profile_examples",children:"here"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>i});var s=t(67294);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);