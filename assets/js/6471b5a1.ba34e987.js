"use strict";(self.webpackChunkpioreactor=self.webpackChunkpioreactor||[]).push([[482],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},l=Object.keys(e);for(o=0;o<l.length;o++)r=l[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)r=l[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=o.createContext({}),c=function(e){var t=o.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(r),m=n,f=d["".concat(p,".").concat(m)]||d[m]||s[m]||l;return r?o.createElement(f,a(a({ref:t},u),{},{components:r})):o.createElement(f,a({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,a=new Array(l);a[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:n,a[1]=i;for(var c=2;c<l;c++)a[c]=r[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4831:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var o=r(7462),n=r(3366),l=(r(7294),r(3905)),a=["components"],i={},p="Local development of Pioreactor",c={unversionedId:"Local development/Develop on Pioreactor locally",id:"Local development/Develop on Pioreactor locally",title:"Local development of Pioreactor",description:"Local development",source:"@site/developer_guide/06-Local development/01-Develop on Pioreactor locally.md",sourceDirName:"06-Local development",slug:"/Local development/Develop on Pioreactor locally",permalink:"/developer_guide/Local development/Develop on Pioreactor locally",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Data stores in the Pioreactor",permalink:"/developer_guide/Storage/Data stores in the Pioreactor"},next:{title:"The Big Architecture Picture",permalink:"/developer_guide/The Big Architecture Picture"}},u=[{value:"Local development",id:"local-development",children:[],level:4},{value:"MQTT",id:"mqtt",children:[],level:4},{value:"Testing",id:"testing",children:[],level:4},{value:"Running jobs locally",id:"running-jobs-locally",children:[],level:4},{value:"Raspberry Pi Images",id:"raspberry-pi-images",children:[],level:4}],s={toc:u};function d(e){var t=e.components,r=(0,n.Z)(e,a);return(0,l.kt)("wrapper",(0,o.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"local-development-of-pioreactor"},"Local development of Pioreactor"),(0,l.kt)("h4",{id:"local-development"},"Local development"),(0,l.kt)("p",null,"To install the Pioreactor codebase locally, it should be enough to clone the repo ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pioreactor/pioreactor"},"pioreactor/pioreactor")," and run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pip3 install -e .\npip3 install -r requirements/requirements_dev.txt\n")),(0,l.kt)("h4",{id:"mqtt"},"MQTT"),(0,l.kt)("p",null,"You will need to set up MQTT locally. On OSX, homebrew can be used to install the MQTT broker ",(0,l.kt)("inlineCode",{parentName:"p"},"mosquitto"),". Also enable logging in ",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/local/etc/mosquitto/mosquitto.conf"),", ex:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"log_dest file path/to/somewhere/.mosquitto/log")),(0,l.kt)("p",null,"The CLI tools ",(0,l.kt)("inlineCode",{parentName:"p"},"mosquitto_pub")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"mosquitto_sub")," should work as well."),(0,l.kt)("h4",{id:"testing"},"Testing"),(0,l.kt)("p",null,"Paho MQTT uses lots of sockets, and running all tests at once can overload the max allowed open files. Try something like ",(0,l.kt)("inlineCode",{parentName:"p"},"ulimit -Sn 10000")," if you receive ",(0,l.kt)("inlineCode",{parentName:"p"},"OSError: [Errno 24] Too many open files")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"py.test pioreactor/tests\n")),(0,l.kt)("h4",{id:"running-jobs-locally"},"Running jobs locally"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"TESTING=1 pio run <job name>\n")),(0,l.kt)("p",null,"You can also modify to hostname and experiment with"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"TESTING=1 \\\nHOSTNAME=<whatever> \\\nEXPERIMENT=<up to you> \\\npio run <job name>\n")),(0,l.kt)("h4",{id:"raspberry-pi-images"},"Raspberry Pi Images"),(0,l.kt)("p",null,"Raspberry Pi images are built in the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Pioreactor/CustoPiZer/tree/pioreactor"},"Pioreactor/CustoPizer")," repo, though these aren't needed for development."))}d.isMDXComponent=!0}}]);