"use strict";(self.webpackChunkpioreactor=self.webpackChunkpioreactor||[]).push([[8033],{66033:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=i(85893),a=i(11151);const r={title:"Adding a new calibration type",slug:"/adding-calibration-type"},o=void 0,l={id:"Calibrations/Calibrations",title:"Adding a new calibration type",description:"This is subject to change! Currently we don't like how much a developer has to implement (or copy and paste) to create a new calibration. We want to make it easier to design new calibrations.",source:"@site/developer-guide/25-Calibrations/01-Calibrations.md",sourceDirName:"25-Calibrations",slug:"/adding-calibration-type",permalink:"/developer-guide/adding-calibration-type",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Adding a new calibration type",slug:"/adding-calibration-type"},sidebar:"tutorialSidebar",previous:{title:"Adding basic time series charts",permalink:"/developer-guide/chart-to-ui"},next:{title:"Local development of Pioreactor",permalink:"/developer-guide/local-development"}},s={},c=[];function d(e){const n={admonition:"admonition",code:"code",li:"li",ol:"ol",p:"p",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"This is subject to change! Currently we don't like how much a developer has to implement (or copy and paste) to create a new calibration. We want to make it easier to design new calibrations."})}),"\n",(0,t.jsx)(n.p,{children:"Ideally, all calibrations, including od_calibration and pump_calibration, should behave similarly:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Interface should have the following:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pio run <x>_calibration"})," starts the calibration and saves it keyed by a unique name (see 2. for storage)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pio run <x>_calibration list"})," lists all saved calibrations, keyed by their unique name."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pio run <x>_calibration display ?name?"})," displays information about the current calibration to be used, or the calibration ?name? if provided"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pio run <x>_calibration change_current <name>"})," changes the current calibration to ",(0,t.jsx)(n.code,{children:"<name>"})," calibration."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pio run <x>_calibration publish <name>"})," publishes the calibration to the leader."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["On disk, all run calibrations should be stored in local persistent storage under ",(0,t.jsx)(n.code,{children:"<x>_calibrations"})," keyed by a unique name, and the current calibration\nshould be stored in ",(0,t.jsx)(n.code,{children:"<x>_current_calibration"}),", with appropriate key (can use ",(0,t.jsx)(n.code,{children:"<calibration_type>"}),") that is not the unique name, but something consistent. Note: The name cannot be ",(0,t.jsx)(n.code,{children:"current"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"A struct should be created / sub-classed from structs.Calibration that will encode / decode the calibration data blob."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["When a new calibration is created, a PUT request to ",(0,t.jsx)(n.code,{children:"/api/calibrations/"})," should be sent. The body is the json-encoded Calibration struct."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["When a new calibration is set as current (change_current), a PATCH request to ",(0,t.jsx)(n.code,{children:"/api/calibrations/<pioreactor_unit>/<calibration_type>/<calibration_name>"})," should be sent."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Creating a new calibration should both publish to leader and set as current."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For example, for ",(0,t.jsx)(n.code,{children:"pump_calibration"}),", the three default calibration types are: ",(0,t.jsx)(n.code,{children:"media_pump_calibration"}),", ",(0,t.jsx)(n.code,{children:"alt_media_pump_calibration"}),", and ",(0,t.jsx)(n.code,{children:"waste_pump_calibration"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>o});var t=i(67294);const a={},r=t.createContext(a);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);