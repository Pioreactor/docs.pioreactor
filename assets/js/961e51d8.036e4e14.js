"use strict";(self.webpackChunkpioreactor=self.webpackChunkpioreactor||[]).push([[618],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=o,m=u["".concat(l,".").concat(h)]||u[h]||c[h]||i;return n?a.createElement(m,r(r({ref:t},d),{},{components:n})):a.createElement(m,r({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2852:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return d},default:function(){return u}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],s={},l='How background jobs work ("activities")',p={unversionedId:"Background Jobs/How background jobs work",id:"Background Jobs/How background jobs work",isDocsHomePage:!1,title:'How background jobs work ("activities")',description:'The core unit of "work" in the Pioreactor software is a background job (called activities in the web interface). Background jobs include odreading, monitor, automation controllers, all the automations_ themselves, etc. Often, a community plugin is a background job (or multiple jobs) that gives your bioreactor new abilities. There are a few core feature of a background job to be highlighted if you intend on working with them.',source:"@site/developer_guide/02-Background Jobs/01-How background jobs work.md",sourceDirName:"02-Background Jobs",slug:"/Background Jobs/How background jobs work",permalink:"/developer_guide/Background Jobs/How background jobs work",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Start here",permalink:"/developer_guide/developer_guide_intro"},next:{title:"Writing new automations",permalink:"/developer_guide/Automations/Writing new automations"}},d=[{value:"Inheritance",id:"inheritance",children:[],level:3},{value:"State of a job",id:"state-of-a-job",children:[],level:3},{value:"Publish &amp; subscribe, also known as pub/sub",id:"publish--subscribe-also-known-as-pubsub",children:[],level:3},{value:"Published settings in MQTT",id:"published-settings-in-mqtt",children:[],level:3},{value:"processes and uniqueness",id:"processes-and-uniqueness",children:[],level:3},{value:"Entry and Exit",id:"entry-and-exit",children:[],level:3}],c={toc:d};function u(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"how-background-jobs-work-activities"},'How background jobs work ("activities")'),(0,i.kt)("p",null,'The core unit of "work" in the Pioreactor software is a background job (called ',(0,i.kt)("em",{parentName:"p"},"activities")," in the web interface). Background jobs include ",(0,i.kt)("inlineCode",{parentName:"p"},"od_reading"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"monitor"),", automation controllers, all the ",(0,i.kt)("em",{parentName:"p"},"automations")," themselves, etc. Often, a community plugin is a background job (or multiple jobs) that gives your bioreactor new abilities. There are a few core feature of a background job to be highlighted if you intend on working with them."),(0,i.kt)("h3",{id:"inheritance"},"Inheritance"),(0,i.kt)("p",null,"All background jobs inherit from the base class ",(0,i.kt)("inlineCode",{parentName:"p"},"pioreactor.background_jobs.base.BackgroundJob"),". This class controls most of the behind-the-scenes behaviour of the class, including the following features:"),(0,i.kt)("h3",{id:"state-of-a-job"},"State of a job"),(0,i.kt)("p",null,"A background job can be in one of 5 different states:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"init"),": the job is initializing, and starts in this state."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ready"),': the job is prepared to do "work", or currently doing "work"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sleeping"),": the job's work is paused (ex: when the stirring job is in state ",(0,i.kt)("inlineCode",{parentName:"li"},"sleeping"),', it turns off its PWM signal.) Called "paused" in the web interface.'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"disconnected"),": the job has disconnected from services (MQTT, databases, etc.) and cleaned itself up."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lost"),": the job did not disconnect gracefully. Something may be wrong.")),(0,i.kt)("p",null,"Here's how they map together:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"                                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                        \u2502          \u2502\n         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba   lost   \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         \u2502                      \u2502       \u2502          \u2502        \u2502\n         \u2502                      \u2502       \u2514\u2500\u2500\u2500\u2500\u2500\u25b2\u2500\u2500\u2500\u2500\u2518        \u2502\n         \u2502                      \u2502             \u2502             \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2510          \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502          \u2502          \u2502            \u2502      \u2502     \u2502              \u2502\n    \u2502   init   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba    ready   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u25ba disconnected \u2502\n    \u2502          \u2502          \u2502            \u2502      \u2502     \u2502              \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u25b2\u2500\u2500\u2500\u2500\u2518      \u2502     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502  \u2502           \u2502            \u2502\n                               \u2502  \u2502           \u2502            \u2502\n                               \u2502  \u2502           \u2502            \u2502\n                          \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502\n                          \u2502            \u2502                   \u2502\n                          \u2502  sleeping  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502            \u2502\n                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("p",null,"The author can optionally define hooks when a job moves between states, and when it enters a new state. For example, the method ",(0,i.kt)("inlineCode",{parentName:"p"},"job.on_ready_to_sleeping()")," is called when the job moves from ",(0,i.kt)("inlineCode",{parentName:"p"},"ready")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"sleeping"),". Similarly, the method ",(0,i.kt)("inlineCode",{parentName:"p"},"on_sleeping")," is called when the jobs enters state ",(0,i.kt)("inlineCode",{parentName:"p"},"sleeping"),". By default, these methods are empty."),(0,i.kt)("p",null,"The recommended way to move a job between states is with ",(0,i.kt)("inlineCode",{parentName:"p"},"job.set_state(job.READY)"),". This will invoke any hooks that exist between the states. State can also be changed over MQTT - we'll get to that point later."),(0,i.kt)("h3",{id:"publish--subscribe-also-known-as-pubsub"},"Publish & subscribe, also known as pub/sub"),(0,i.kt)("p",null,"On job creation, the job will connect to MQTT to allow for publishing and subscribing. Internally, the attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"sub_client")," is for subscribing from MQTT, and ",(0,i.kt)("inlineCode",{parentName:"p"},"pub_client")," is for publishing to MQTT. Internally, ",(0,i.kt)("inlineCode",{parentName:"p"},"sub_client")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"pub_client")," are ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py"},"Paho client objects"),"."),(0,i.kt)("p",null,"Since publishing is so common, we also expose a ",(0,i.kt)("inlineCode",{parentName:"p"},".publish")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'job = SomeBackgroundJob(unit, experiment)\njob.publish(f"pioreactor/{job.unit}/{job.experiment}/...", payload)\n')),(0,i.kt)("p",null,"Another common pattern is to subscribe to a MQTT topic, and have a callback whenever a message comes in. This is done with the ",(0,i.kt)("inlineCode",{parentName:"p"},".subscribe_and_callback")," method. Most often, this is used internally in the ",(0,i.kt)("inlineCode",{parentName:"p"},".start_passive_listeners")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'\nclass SomeBackgroundJob(BackgoundJob):\n\n    def __init__(self, ...):\n        ...\n\n        self.start_passive_listeners()\n\n\n    def response_to_dosing_event(self, msg):\n        # change self in response\n        ...\n\n    def start_passive_listeners(self):\n        self.subscribe_and_callback(\n            self.response_to_dosing_event,\n            f"pioreactor/{self.unit}/{self.experiment}/dosing_events",\n        )\n\n')),(0,i.kt)("h3",{id:"published-settings-in-mqtt"},"Published settings in MQTT"),(0,i.kt)("p",null,"A common task is when we have a job running, say stirring job, and we want to dynamically update an attribute, like the target RPM, without restarting the job."),(0,i.kt)("p",null,"We also often want to know the value of a job's attribute when it changes. For example, in the stirring job, we'd like to know what the ",(0,i.kt)("em",{parentName:"p"},"actual")," RPM is. This can't be edited externally (it's a measured value...), but we want it available for other jobs to use, for the web interface to display, or to sink it into a database."),(0,i.kt)("p",null,"These two tasks, updating attributes and reading attributes in realtime, are so common that we've wrapped the logic into the parent ",(0,i.kt)("inlineCode",{parentName:"p"},"BackgroundJob")," class, and allow job authors to tell us what they wish to update and/or read."),(0,i.kt)("p",null,"In the class definition, the attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"published_settings")," defines which class attributes they would like to track. For example, the job responsible for stirring looks like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Stirrer(BackgoundJob):\n\n    published_settings = {\n        "target_rpm": {"datatype": "json", "settable": True, "unit": "RPM"},\n        "measured_rpm": {"datatype": "json", "settable": False, "unit": "RPM"},\n        "duty_cycle": {"datatype": "float", "settable": True, "unit": "%"},\n    }\n\n    ...\n\n')),(0,i.kt)("p",null,"Thus the attributes ",(0,i.kt)("inlineCode",{parentName:"p"},"target_rpm"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"measured_rpm"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"duty_cycle")," are all published to MQTT when they change, but only ",(0,i.kt)("inlineCode",{parentName:"p"},"duty_cycle")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"target_rpm")," are able to be updated over MQTT (as defined by ",(0,i.kt)("inlineCode",{parentName:"p"},"settable"),"). The ",(0,i.kt)("inlineCode",{parentName:"p"},"datatype")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"unit")," are not used currently and are there for documentation, but this may change in a later version."),(0,i.kt)("p",null,"When a class attribute that's present in ",(0,i.kt)("inlineCode",{parentName:"p"},"published_settings")," changes, a MQTT message is published under the topic ",(0,i.kt)("inlineCode",{parentName:"p"},"pioreactor/{self.unit}/{self.experiment}/{self.job_name}/{attr}")," with payload equal to the new value of the attribute. This is how the web interface is provided real-time data."),(0,i.kt)("p",null,"For updating an attribute, the ",(0,i.kt)("inlineCode",{parentName:"p"},"BackgroundJob")," parent class listens to the MQTT topic:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pioreactor/{self.unit}/{self.experiment}/{self.job_name}/+/set\n")),(0,i.kt)("p",null,"(the ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," is a MQTT wildcard), and when a message comes in, the class will check if the attribute is ",(0,i.kt)("inlineCode",{parentName:"p"},"settable"),". If so, a lookup is done to see if a class method called ",(0,i.kt)("inlineCode",{parentName:"p"},"set_<attr>")," is defined, and if present, calls that, with the only argument the message's payload. Otherwise, a simple assignment is done: ",(0,i.kt)("inlineCode",{parentName:"p"},"self.<attr> = payload"),". The utility of a ",(0,i.kt)("inlineCode",{parentName:"p"},"set_<attr>")," method is when changing the attribute requires more logic (ex: changing a PID controller's set point)."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"state")," is automatically appended to ",(0,i.kt)("inlineCode",{parentName:"p"},"published_settings")," (with ",(0,i.kt)("inlineCode",{parentName:"p"},"settable: True"),") so the state of the job can always be updated from MQTT"))),(0,i.kt)("h3",{id:"processes-and-uniqueness"},"processes and uniqueness"),(0,i.kt)("h3",{id:"entry-and-exit"},"Entry and Exit"),(0,i.kt)("p",null,"It's important to treat background jobs, with all their connections to networks and GPIO pins, as objects that need to be cleaned up properly. There are two traditional ways to use a background job:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"job = SomeBackgroundJob(unit, experiment)\n...\njob.set_state(job.DISCONNECTED)\n# all cleaned up\n")),(0,i.kt)("p",null,"alternatively, with a context manager:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"with SomeBackgroundJob(unit, experiment) as job:\n  ...\n\n# all cleaned up - state is set to disconnected\n")),(0,i.kt)("p",null,"When the Python process exits, the job is also cleaned up."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The following will cause problems:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"\ndef function_that_doesnt_clean_up():\n    job = SomeBackgroundJob(unit, experiment)\n    return True\n\nvalue = function_that_doesnt_clean_up()\n...\n")),(0,i.kt)("p",{parentName:"div"},"In the above, the job ",(0,i.kt)("inlineCode",{parentName:"p"},"SomeBackgroundJob")," isn't disconnected, and state hasn't changed - nor can you access the job anymore (no accessible references). Do this instead:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def function_that_doesnt_clean_up():\n    with SomeBackgroundJob(unit, experiment) as job:\n        ...\n    return True\n\nvalue = function_that_doesnt_clean_up()\n")))))}u.isMDXComponent=!0}}]);