"use strict";(self.webpackChunkpioreactor=self.webpackChunkpioreactor||[]).push([[8033],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),c=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(a),b=r,m=u["".concat(p,".").concat(b)]||u[b]||d[b]||i;return a?n.createElement(m,o(o({ref:t},s),{},{components:a})):n.createElement(m,o({ref:t},s))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=b;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}b.displayName="MDXCreateElement"},13:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const i={title:"Adding a new calibration type",slug:"/adding-calibration-type"},o=void 0,l={unversionedId:"Calibrations/Calibrations",id:"Calibrations/Calibrations",title:"Adding a new calibration type",description:"Ideally, all calibrations, including odcalibration and pumpcalibration, should behave similarly:",source:"@site/developer-guide/25-Calibrations/01-Calibrations.md",sourceDirName:"25-Calibrations",slug:"/adding-calibration-type",permalink:"/developer-guide/adding-calibration-type",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Adding a new calibration type",slug:"/adding-calibration-type"},sidebar:"tutorialSidebar",previous:{title:"Adding basic time series charts",permalink:"/developer-guide/chart-to-ui"},next:{title:"Local development of Pioreactor",permalink:"/developer-guide/local-development"}},p={},c=[],s={toc:c},u="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Ideally, all calibrations, including od_calibration and pump_calibration, should behave similarly:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Interface should have the following:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pio run <x>_calibration")," starts the calibration and saves it keyed by a unique name (see 2. for storage)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pio run <x>_calibration list")," lists all saved calibrations, keyed by their unique name."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pio run <x>_calibration display ?name?")," displays information about the current calibration to be used, or the calibration ?name? if provided"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pio run <x>_calibration change_current <name>")," changes the current calibration to ",(0,r.kt)("inlineCode",{parentName:"li"},"<name>")," calibration."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pio run <x>_calibration publish <name>")," publishes the calibration to the leader."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"On disk, all run calibrations should be stored in local persistent storage under ",(0,r.kt)("inlineCode",{parentName:"p"},"<x>_calibrations")," keyed by a unique name, and the current calibration\nshould be stored in ",(0,r.kt)("inlineCode",{parentName:"p"},"<x>_current_calibration"),", with appropriate key (can use ",(0,r.kt)("inlineCode",{parentName:"p"},"<calibration_type>"),") that is not the unique name, but something consistent. Note: The name cannot be ",(0,r.kt)("inlineCode",{parentName:"p"},"current"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"A struct should be created / sub-classed from structs.Calibration that will encode / decode the calibration data blob.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"When a new calibration is created, a PUT request to ",(0,r.kt)("inlineCode",{parentName:"p"},"/api/calibrations/")," should be sent. The body is the json-encoded Calibration struct.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"When a new calibration is set as current (change_current), a PATCH request to ",(0,r.kt)("inlineCode",{parentName:"p"},"/api/calibrations/<pioreactor_unit>/<calibration_type>/<calibration_name>")," should be sent.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Creating a new calibration should both publish to leader and set as current."))),(0,r.kt)("p",null,"For example, for ",(0,r.kt)("inlineCode",{parentName:"p"},"pump_calibration"),", the three default calibration types are: ",(0,r.kt)("inlineCode",{parentName:"p"},"media_pump_calibration"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"alt_media_pump_calibration"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"waste_pump_calibration"),"."))}d.isMDXComponent=!0}}]);