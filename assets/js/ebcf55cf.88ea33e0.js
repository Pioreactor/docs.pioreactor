"use strict";(self.webpackChunkpioreactor=self.webpackChunkpioreactor||[]).push([[2829],{54612:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var o=n(85893),i=n(11151);const a={title:"Writing a new automation",slug:"/writing-automations-1"},s=void 0,r={id:"Automations/writing-automations-1",title:"Writing a new automation",description:"An automation is a hands-off way to adjust the environment for the microbes. We currently support three types of automations: dosing, LED, and temperature.",source:"@site/developer-guide/04-Automations/02-writing-automations-1.md",sourceDirName:"04-Automations",slug:"/writing-automations-1",permalink:"/developer-guide/writing-automations-1",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Writing a new automation",slug:"/writing-automations-1"},sidebar:"tutorialSidebar",previous:{title:"Automations architecture",permalink:"/developer-guide/intro-automations"},next:{title:"Another example writing a new automation",permalink:"/developer-guide/writing-automations-2"}},l={},d=[{value:"Creating our first custom automation",id:"creating-our-first-custom-automation",level:3},{value:"Running the script",id:"running-the-script",level:3},{value:"Editing attributes over MQTT (optional)",id:"editing-attributes-over-mqtt-optional",level:4},{value:"Extensions of our custom automation",id:"extensions-of-our-custom-automation",level:3},{value:"Dynamic volume exchanged",id:"dynamic-volume-exchanged",level:4},{value:"Using <code>latest_growth_rate</code>",id:"using-latest_growth_rate",level:4}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"An automation is a hands-off way to adjust the environment for the microbes. We currently support three types of automations: dosing, LED, and temperature."}),"\n",(0,o.jsx)(t.p,{children:"In this section, we'll develop a simple dosing automation."}),"\n",(0,o.jsx)(t.h3,{id:"creating-our-first-custom-automation",children:"Creating our first custom automation"}),"\n",(0,o.jsxs)(t.p,{children:["Writing an automation involves creating a Python class and overriding specific methods. It would be helpful to be somewhat familiar with ",(0,o.jsx)(t.a,{href:"https://realpython.com/python3-object-oriented-programming/",children:"Python classes"})," before beginning. Here's an example of a (naive) turbidostat automation, i.e. it will add fresh media and remove old media when an optical density threshold is exceeded. The full code is below, and we'll go through each line of code after:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'from pioreactor.automations.dosing.base import DosingAutomationJobContrib\n\nclass NaiveTurbidostat(DosingAutomationJobContrib):\n\n    automation_name = "naive_turbidostat"\n    published_settings = {\n        "target_od": {"datatype": "float", "settable": True, "unit": "od600"},\n    }\n    def __init__(self, target_od, **kwargs):\n        super().__init__(**kwargs)\n        self.target_od = float(target_od)\n\n    def execute(self):\n        if self.latest_od > self.target_od:\n            self.execute_io_action(media_ml=1.0, waste_ml=1.0)\n'})}),"\n",(0,o.jsxs)(t.p,{children:["First important thing is to subclass from ",(0,o.jsx)(t.code,{children:"DosingAutomationJobContrib"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"from pioreactor.automations.dosing.base import DosingAutomationJobContrib\n\nclass NaiveTurbidostat(DosingAutomationJobContrib):\n   ...\n"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"DosingAutomationJobContrib"})," is a subclass of a ",(0,o.jsx)(t.code,{children:"BackgroundJob"}),". The ",(0,o.jsx)(t.code,{children:"-Contrib"})," part is a small detail to specify that it's a third-party automation (i.e. ",(0,o.jsx)(t.em,{children:"you"})," are developing it, not us.)"]}),"\n",(0,o.jsxs)(t.p,{children:['We need a "key" to i) distinguish this from other automations, and ii) be able to be communicate between systems (think: the web UI in JavaScript to Python, and back). The ',(0,o.jsx)(t.code,{children:"automation_name"})," attribute does this for us. Normally, it's the ",(0,o.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Snake_case",children:"snakecase"})," of the class name."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'    automation_name = "naive_turbidostat"\n'})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"published_settings"})," tells the Pioreactor software what class attributes are published to MQTT, and if they are editable via MQTT (we will try editing over MQTT later). This is important if you wish to dynamically change attributes of an automation during an experiment, for example: from the web interface. Our class has the following:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'...\n    published_settings = {\n        "target_od": {"datatype": "float", "settable": True, "unit": "od600"},\n    }\n...\n'})}),"\n",(0,o.jsxs)(t.p,{children:["The associated metadata says that the class attribute ",(0,o.jsx)(t.code,{children:"target_od"})," is a float, is editable via MQTT (so it can be changed using the web interface), and it has units ",(0,o.jsx)(t.code,{children:"od600"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Next, we define how to initialize our automation class. Here we can add settings we want to accept from the user: what is our initial target optical density. Note the boilerplate ",(0,o.jsx)(t.code,{children:"**kwargs"}),", and ",(0,o.jsx)(t.code,{children:"super()"})," are important."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"    def __init__(self, target_od, **kwargs):\n        super().__init__(**kwargs)\n        self.target_od = float(target_od)\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Finally, every ",(0,o.jsx)(t.code,{children:"duration"})," (specified in the controller, later in this section) minutes, the function ",(0,o.jsx)(t.code,{children:"execute"})," will run. ",(0,o.jsx)(t.code,{children:"duration"})," can be kept low (ex: to often check for some condition), or used to set some periodic task (ex: a chemostat doses every X minutes). The ",(0,o.jsx)(t.code,{children:"execute"})," contains the core logic of the automation. In our simple case, we want to dilute the vial if we have exceed the ",(0,o.jsx)(t.code,{children:"latest_od"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"    def execute(self):\n        if self.latest_od > self.target_od:\n            self.execute_io_action(media_ml=1.0, waste_ml=1.0)\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Since we are working with a fixed volume, ",(0,o.jsx)(t.code,{children:"media_ml"})," must equal ",(0,o.jsx)(t.code,{children:"waste_ml"}),", else an error will be thrown. What is ",(0,o.jsx)(t.code,{children:"latest_od"})," attribute? Our class, when active, is listening to new optical densities being recorded. Hence when ",(0,o.jsx)(t.code,{children:"execute"})," runs, we'll have access to the most up-to-date value of optical density. Likewise, there are also ",(0,o.jsx)(t.code,{children:"latest_normalized_od"})," and ",(0,o.jsx)(t.code,{children:"latest_growth_rate"})," attributes that update when a new growth-rate value is calculated. All three attributes are defined and maintained in the parent class."]}),"\n",(0,o.jsx)(t.h3,{id:"running-the-script",children:"Running the script"}),"\n",(0,o.jsxs)(t.p,{children:["How do we run this automation now? Let's put the code into a file called ",(0,o.jsx)(t.code,{children:"naive_turbidostat.py"})]}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsxs)(t.p,{children:["You can create this file on your Pioreactor's Raspberry Pi: after accessing the Raspberry Pi's command line, typing ",(0,o.jsx)(t.code,{children:"nano naive_turbidostat.py"}),", and pasting in the code below."]})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'# -*- coding: utf-8 -*-\n"""\nrun on the command line with\n$ python3 naive_turbidostat.py\n\nExit with ctrl-c\n"""\nfrom pioreactor.automations.dosing.base import DosingAutomationJobContrib\n\nclass NaiveTurbidostat(DosingAutomationJobContrib):\n\n    automation_name = "naive_turbidostat"\n    published_settings = {\n        "target_od": {"datatype": "float", "settable": True, "unit": "od600"},\n    }\n    def __init__(self, target_od, **kwargs):\n        super().__init__(**kwargs)\n        self.target_od = float(target_od)\n\n    def execute(self):\n        if self.latest_od > self.target_od:\n            self.execute_io_action(media_ml=1.0, waste_ml=1.0)\n\nif __name__=="__main__":\n    from pioreactor.background_jobs.dosing_control import DosingController\n\n    dc = DosingController(\n        unit="test_unit",\n        experiment="test_experiment",\n        automation_name="naive_turbidostat",\n        target_od=2.0,\n        duration=1, # check every 1 minute\n    )\n    dc.block_until_disconnected()\n\n'})}),"\n",(0,o.jsxs)(t.p,{children:["This uses the dosing controller class, ",(0,o.jsx)(t.code,{children:"DosingController"}),", which controls which dosing automation is running. By using ",(0,o.jsx)(t.code,{children:"DosingAutomationJobContrib"}),", our new ",(0,o.jsx)(t.code,{children:"NaiveTurbidostat"})," class is automatically discovered by ",(0,o.jsx)(t.code,{children:"DosingController"})," and referenced by the ",(0,o.jsx)(t.code,{children:"automation_name"})," we chose, ",(0,o.jsx)(t.code,{children:"naive_turbidostat"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Run the script with ",(0,o.jsx)(t.code,{children:"python3 naive_turbidostat.py"}),". This will start the job. After a minute, you may notice that errors are thrown - that's because there's no optical density measurements being produced!"]}),"\n",(0,o.jsx)(t.h4,{id:"editing-attributes-over-mqtt-optional",children:"Editing attributes over MQTT (optional)"}),"\n",(0,o.jsxs)(t.p,{children:["We'll demonstrate the ability to dynamically change the ",(0,o.jsx)(t.code,{children:"target_od"})," attribute using MQTT. For each member of ",(0,o.jsx)(t.code,{children:"published_settings"}),", the ",(0,o.jsx)(t.code,{children:"DosingAutomationJobContrib"})," class listens to the MQTT topic:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"pioreactor/<unit name>/<experiment>/dosing_automation/<attribute>/set\n"})}),"\n",(0,o.jsxs)(t.p,{children:["We'll use ",(0,o.jsx)(t.code,{children:"mosquitto_pub"})," to publish a message to this topic. So, with the Python script running, open a new command line, and enter the following:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'mosquitto_pub -t "pioreactor/test_unit/test_experiment/dosing_automation/target_od/set" -m 5.0 -u pioreactor -P raspberry\n'})}),"\n",(0,o.jsxs)(t.p,{children:["You should see some logs in the Python console report that the ",(0,o.jsx)(t.code,{children:"target_od"})," was changed. Also, a the value of 5.0 is published and retained to the topic ",(0,o.jsx)(t.code,{children:"pioreactor/test_unit/test_experiment/dosing_automation/target_od"})]}),"\n",(0,o.jsx)(t.p,{children:"Why is this useful?"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"This is how the web interface updates settings in running activities."}),"\n",(0,o.jsx)(t.li,{children:"Other Pioreactor activities can update each other's settings."}),"\n",(0,o.jsx)(t.li,{children:"External programs or apps can monitor and update settings this way, too."}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"extensions-of-our-custom-automation",children:"Extensions of our custom automation"}),"\n",(0,o.jsx)(t.p,{children:"Below are some extensions, with additions highlighted"}),"\n",(0,o.jsx)(t.h4,{id:"dynamic-volume-exchanged",children:"Dynamic volume exchanged"}),"\n",(0,o.jsxs)(t.p,{children:["Exchanging 1ml each time may not be enough, so we add ",(0,o.jsx)(t.code,{children:"volume"})," to the ",(0,o.jsx)(t.code,{children:"published_settings"}),". Now, from the UI, we can dynamically adjust the volume."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",metastring:"{8,10,13,17}",children:'from pioreactor.automations.dosing.base import DosingAutomationJobContrib\n\nclass NaiveTurbidostat2(DosingAutomationJobContrib):\n\n    automation_name = "naive_turbidostat2"\n    published_settings = {\n        "target_od": {"datatype": "float", "settable": True, "unit": "od600"},\n        "volume": {"datatype": "float", "settable": True, "unit": "mL"},\n    }\n    def __init__(self, target_od, volume, **kwargs):\n        super().__init__(**kwargs)\n        self.target_od = float(target_od)\n        self.volume = float(volume)\n\n    def execute(self):\n        if self.latest_od > self.target_od:\n            self.execute_io_action(media_ml=self.volume, waste_ml=self.volume)\n'})}),"\n",(0,o.jsxs)(t.h4,{id:"using-latest_growth_rate",children:["Using ",(0,o.jsx)(t.code,{children:"latest_growth_rate"})]}),"\n",(0,o.jsx)(t.p,{children:"If our growth rate is high, we may want to modify the volume exchanged to keep up. A naive solution: we can bump up the exchanged volume if the growth rate is high. Much better would be a dynamic solution, or a feedback loop."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",metastring:"{8,10,13,17}",children:'from pioreactor.automations.dosing.base import DosingAutomationJobContrib\n\nclass NaiveTurbidostat3(DosingAutomationJobContrib):\n\n    automation_name = "naive_turbidostat3"\n    published_settings = {\n        "target_od": {"datatype": "float", "settable": True, "unit": "od600"},\n        "volume": {"datatype": "float", "settable": True, "unit": "mL"},\n    }\n    def __init__(self, target_od, volume, **kwargs):\n        super().__init__(**kwargs)\n        self.target_od = float(target_od)\n        self.volume = float(volume)\n\n    def execute(self):\n        if self.latest_od > self.target_od:\n            if self.latest_growth_rate > 0.2:\n                self.execute_io_action(media_ml=2 * self.volume, waste_ml=2 * self.volume)\n            else:\n                self.execute_io_action(media_ml=self.volume, waste_ml=self.volume)\n\n'})})]})}function u(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>s});var o=n(67294);const i={},a=o.createContext(i);function s(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);