"use strict";(self.webpackChunkpioreactor=self.webpackChunkpioreactor||[]).push([[7216],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var m=r.createContext({}),s=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(m.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,m=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),c=s(n),d=o,f=c["".concat(m,".").concat(d)]||c[d]||p[d]||a;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=c;var u={};for(var m in t)hasOwnProperty.call(t,m)&&(u[m]=t[m]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},50625:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>u,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const a={title:"Adding custom pumps to dosing automations",slug:"/writing-pump-software"},i=void 0,u={unversionedId:"Automations/writing-pump-software",id:"Automations/writing-pump-software",title:"Adding custom pumps to dosing automations",description:"You may want to use a different pumping system for the Pioreactor (or, if you are using the Pioreactor software with a different vessel, you may require different pumps). You can add code for different pumps like so:",source:"@site/developer-guide/04-Automations/04-writing-pump-software.md",sourceDirName:"04-Automations",slug:"/writing-pump-software",permalink:"/developer-guide/writing-pump-software",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Adding custom pumps to dosing automations",slug:"/writing-pump-software"},sidebar:"tutorialSidebar",previous:{title:"Another example writing a new automation",permalink:"/developer-guide/writing-automations-2"},next:{title:"Automation events",permalink:"/developer-guide/events"}},m={},s=[],l={toc:s};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You may want to use a different pumping system for the Pioreactor (or, if you are using the Pioreactor software with a different vessel, you may require different pumps). You can add code for different pumps like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# -*- coding: utf-8 -*-\nimport time\nfrom pioreactor.logging import create_logger\nfrom pioreactor.automations import DosingAutomationJob\nfrom pioreactor.whoami import get_unit_name, get_latest_experiment_name\n\n\ndef custom_add_media_program(cls, ml: float, unit: str, experiment: str, source_of_event: str) -> float:\n    # add your custom logic here: could be interfacing with i2c, etc.\n    # Signature should look like:\n    # function(cls, ml: float, unit: str, experiment: str, source_of_event: str) -> float:\n    ...\n    pwm = PWM(...)\n    cls.logger.info(f"pumping {ml}")\n    time.sleep(ml * 2)\n    return ml\n\ndef custom_alt_add_media_program(cls, ml: float, unit: str, experiment: str, source_of_event: str) -> float:\n    ...\n    return ml\n\ndef custom_remove_media_program(cls, ml: float, unit: str, experiment: str, source_of_event: str) -> float:\n    ...\n    return ml\n\n\n\nclass CustomPumper(DosingAutomationJob):\n\n    automation_name = "custom_pumper"\n\n    published_settings = {\n        "duration": {"datatype": "float", "settable": True, "unit": "min"},\n    }\n\n    # overwrite the following variables (all optional) with custom pumping logic\n    add_media_to_bioreactor = custom_add_media_program\n    add_alt_media_to_bioreactor = custom_add_alt_media_program\n    remove_waste_from_bioreactor = custom_remove_media_program\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n    def execute(self):\n        self.execute_io_action(media_ml=1.0, alt_media_ml=1.0, waste_ml=2.0)\n\n\nif __name__ == "__main__":\n\n    from pioreactor.background_jobs.dosing_control import DosingController\n\n    dc = DosingController(\n        "custom_pumper",\n        duration=1, # execute every 1 minute\n        unit="test_unit",\n        experiment="test_experiment"\n    )\n    dc.block_until_disconnected()\n')),(0,o.kt)("p",null,"You can also omit the ",(0,o.kt)("inlineCode",{parentName:"p"},"cls")," argument:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def custom_add_media_program(ml: float, unit: str, experiment: str, source_of_event: str) -> float:\n    # add your custom logic here: could be interfacing with i2c, etc.\n    ...\n    create_logger("custom_add_media_program").info(f"pumping {ml}")\n    time.sleep(ml * 2)\n    return ml\n')),(0,o.kt)("p",null,"but then you need to add ",(0,o.kt)("inlineCode",{parentName:"p"},"staticmethod"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\nclass CustomPump(DosingAutomationJob):\n\n    automation_name = "custom_pump"\n\n    published_settings = {\n        "duration": {"datatype": "float", "settable": True, "unit": "min"},\n    }\n\n    add_media_to_bioreactor = staticmethod(custom_add_media_program)\n    ...\n')),(0,o.kt)("p",null,"The function signature should look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"function(ml: float, unit: str, experiment: str, source_of_event: str) -> float:\n")))}p.isMDXComponent=!0}}]);