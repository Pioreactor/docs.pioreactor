"use strict";(self.webpackChunkpioreactor=self.webpackChunkpioreactor||[]).push([[7046],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(r),m=o,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9225:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var n=r(87462),o=(r(67294),r(3905));const a={title:"Important concepts",slug:"/important-concepts"},i=void 0,c={unversionedId:"important-concepts",id:"important-concepts",title:"Important concepts",description:"Cluster topology",source:"@site/developer-guide/02-important-concepts.md",sourceDirName:".",slug:"/important-concepts",permalink:"/developer-guide/important-concepts",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Important concepts",slug:"/important-concepts"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/developer-guide/introduction"},next:{title:"Introduction to background jobs",permalink:"/developer-guide/intro-background-jobs"}},s={},l=[{value:"Cluster topology",id:"cluster-topology",level:3},{value:"Networking",id:"networking",level:3},{value:"MQTT",id:"mqtt",level:3}],p={toc:l};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"cluster-topology"},"Cluster topology"),(0,o.kt)("p",null,'One of the Raspberry Pi\'s is assigned as the "leader", and this hosts most of the services: web server, MQTT broker, database, etc. It also sends commands to any "workers". Together, the leader and all the workers are called a "cluster". See more information about clusters ',(0,o.kt)("a",{parentName:"p",href:"/user-guide/create-cluster"},"here"),"."),(0,o.kt)("h3",{id:"networking"},"Networking"),(0,o.kt)("p",null,"The Raspberry Pis communicate through the local network (in more advanced cases, this network is hosted on the leader). Each RPi broadcasts its hostname through mDNS, and the leader also broadcasts an alias (default: ","`","pioreactor.local","`",")."),(0,o.kt)("h3",{id:"mqtt"},"MQTT"),(0,o.kt)("p",null,"MQTT is message broker system that the Pioreactor uses to communicate between Pioreactors and between processes. Think of it as an in-memory event log, and any Pioreactor in the cluster can interact with it. The leader Pioreactor hosts the event log (using the software ",(0,o.kt)("a",{parentName:"p",href:"https://mosquitto.org/"},"Mosquitto"),"), and worker Pioreactors (which are called MQTT ",(0,o.kt)("em",{parentName:"p"},"clients"),") will read and write to it. On the leader's command line, you can view the event log with ",(0,o.kt)("inlineCode",{parentName:"p"},"pio mqtt"),"."))}u.isMDXComponent=!0}}]);