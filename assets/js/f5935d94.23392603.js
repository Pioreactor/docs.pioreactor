"use strict";(self.webpackChunkpioreactor=self.webpackChunkpioreactor||[]).push([[5790],{8547:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var o=n(85893),s=n(11151);const a={title:"Automation events",slug:"/events",hide_table_of_contents:!0},i=void 0,r={id:"Automations/events",title:"Automation events",description:"The execute method attached to any automation can return either None, or a AutomationEvent. If the latter, the event will be published to MQTT as a published setting, i.e under the topic pioreactor///dosingautomation/latestevent. This can be used to downstream events that want to know about what events are occurring.",source:"@site/developer-guide/04-Automations/05-events.md",sourceDirName:"04-Automations",slug:"/events",permalink:"/developer-guide/events",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Automation events",slug:"/events",hide_table_of_contents:!0},sidebar:"tutorialSidebar",previous:{title:"Another example writing a new automation",permalink:"/developer-guide/writing-automations-2"},next:{title:"Writing scripts",permalink:"/developer-guide/writing-scripts"}},d={},c=[{value:"Using events, and creating your own",id:"using-events-and-creating-your-own",level:3}];function l(e){const t={code:"code",em:"em",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"execute"})," method attached to any automation can return either ",(0,o.jsx)(t.code,{children:"None"}),", or a ",(0,o.jsx)(t.code,{children:"AutomationEvent"}),". If the latter, the event will be published to MQTT as a published setting, i.e under the topic ",(0,o.jsx)(t.code,{children:"pioreactor/<unit>/<experiment>/dosing_automation/latest_event"}),". This can be used to downstream events that want to know about what events are occurring."]}),"\n",(0,o.jsxs)(t.p,{children:["It may make more sense to look at a specific ",(0,o.jsx)(t.code,{children:"execute"}),". This is from the builtin ",(0,o.jsx)(t.code,{children:"Turbidostat"})," automation:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"class Turbidostat(DosingAutomationJob):\n    ...\n\n    def execute(self) -> Optional[events.DilutionEvent]:\n        if self.latest_od >= self.target_od:\n            self.execute_io_action(media_ml=self.volume, waste_ml=self.volume)\n            return events.DilutionEvent(\n                f\"latest OD={self.latest_od:.2f} >= target OD={self.target_od:.2f}\",\n                {'latest_od': self.latest_od, 'target_od': self.target_od}\n            )\n        else:\n            return\n"})}),"\n",(0,o.jsxs)(t.p,{children:["When ",(0,o.jsx)(t.code,{children:"execute"})," runs, either a ",(0,o.jsx)(t.code,{children:"DilutionEvent"})," or nothing is returned. All events take up two (optional) arguments: a message, and a dictionary of arbitrary data. In this case, we've included a small message of ",(0,o.jsx)(t.em,{children:"why"})," the dosing did or did not occur, and included some metadata about the optical densities."]}),"\n",(0,o.jsxs)(t.p,{children:["After ",(0,o.jsx)(t.code,{children:"execute"})," returns an event, it will be published to MQTT. For example:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'pioreactor/unit/demo_exp/dosing_automation/latest_event   {"event_name":"NoEvent","message":"latest OD=0.98 < target OD=1.00","data":{"latest_od":0.98,"target_od":1.0}}\n'})}),"\n",(0,o.jsx)(t.p,{children:"This can be listed in other jobs, and acted on, if needed."}),"\n",(0,o.jsx)(t.h3,{id:"using-events-and-creating-your-own",children:"Using events, and creating your own"}),"\n",(0,o.jsxs)(t.p,{children:["Pioreactor ships with some default events. They are located in ",(0,o.jsx)(t.code,{children:"pioreactor.automation.events"}),". Events are simple subclass of ",(0,o.jsx)(t.code,{children:"events.AutomationEvent"}),", so events behave and look the same, except for their name."]}),"\n",(0,o.jsx)(t.p,{children:"You can create custom automations, too:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"From pioreactor.automations.events import AutomationEvent\n\nclass MyExampleEvent(AutomationEvent):\n    pass\n\n\nclass MyAutomation(...):\n    ...\n\n    def execute(self):\n        ...\n        event = MyExampleEvent(\"my message\", {'some_data': 1.0})\n        return event\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>i});var o=n(67294);const s={},a=o.createContext(s);function i(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);