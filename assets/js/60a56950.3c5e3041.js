"use strict";(self.webpackChunkpioreactor=self.webpackChunkpioreactor||[]).push([[5542],{5156:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var o=i(85893),t=i(11151);const a={title:"Turning your plugins into a Python package to share",slug:"/plugin-as-python-package"},l=void 0,r={id:"Plugins/plugin-as-python-package",title:"Turning your plugins into a Python package to share",description:"If you'd like to contribute your plugin to the community, this is done easily by creating a Python package and uploading to PyPI. Let's walk through this!",source:"@site/developer-guide/07-Plugins/03-plugin-as-python-package.md",sourceDirName:"07-Plugins",slug:"/plugin-as-python-package",permalink:"/developer-guide/plugin-as-python-package",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Turning your plugins into a Python package to share",slug:"/plugin-as-python-package"},sidebar:"tutorialSidebar",previous:{title:"Adding your plugins to the web interface",permalink:"/developer-guide/adding-plugins-to-ui"},next:{title:"Custom & additional pumps for dosing automations",permalink:"/developer-guide/writing-pump-software"}},s={},d=[{value:"Choosing a plugin name",id:"choosing-a-plugin-name",level:2},{value:"Organizing your files",id:"organizing-your-files",level:2},{value:"1. The subfolder <code>&lt;PLUGIN_NAME&gt;</code> containing your plugin&#39;s code",id:"1-the-subfolder-plugin_name-containing-your-plugins-code",level:4},{value:"2. A license text file, named <code>LICENSE.txt</code>",id:"2-a-license-text-file-named-licensetxt",level:4},{value:"3. A MANIFEST file, named <code>MANIFEST.in</code>",id:"3-a-manifest-file-named-manifestin",level:4},{value:"4. A <code>README.md</code>",id:"4-a-readmemd",level:4},{value:"5. A Python <code>setup.py</code> file",id:"5-a-python-setuppy-file",level:4},{value:"Contents of the subfolder, <code>&lt;PLUGIN_NAME&gt;</code>",id:"contents-of-the-subfolder-plugin_name",level:3},{value:"1. Your plugins Python files",id:"1-your-plugins-python-files",level:4},{value:"2. A Python <code>__init__.py</code> file",id:"2-a-python-__init__py-file",level:4},{value:"3. Optional: A configuration file, named <code>additional_config.ini</code>",id:"3-optional-a-configuration-file-named-additional_configini",level:4},{value:"4. Optional: Adding details for the UI",id:"4-optional-adding-details-for-the-ui",level:4},{value:"If implementing a job:",id:"if-implementing-a-job",level:5},{value:"If implementing an automation:",id:"if-implementing-an-automation",level:5},{value:"5. Optional: adding tables to the SQL database and exposing them on the Export Data page",id:"5-optional-adding-tables-to-the-sql-database-and-exposing-them-on-the-export-data-page",level:4},{value:"6. Optional: adding a custom chart to the UI",id:"6-optional-adding-a-custom-chart-to-the-ui",level:4},{value:"7. Optional: adding post_install and pre_uninstall bash scripts.",id:"7-optional-adding-post_install-and-pre_uninstall-bash-scripts",level:4},{value:"8. Optional: only installing on leader Pioreactor.",id:"8-optional-only-installing-on-leader-pioreactor",level:4},{value:"Create a Python package on PyPI",id:"create-a-python-package-on-pypi",level:2},{value:"Installing your Python package on your cluster",id:"installing-your-python-package-on-your-cluster",level:2},{value:"Sharing your plugin with the community",id:"sharing-your-plugin-with-the-community",level:2}];function c(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"If you'd like to contribute your plugin to the community, this is done easily by creating a Python package and uploading to PyPI. Let's walk through this!"}),"\n",(0,o.jsx)(n.h2,{id:"choosing-a-plugin-name",children:"Choosing a plugin name"}),"\n",(0,o.jsxs)(n.p,{children:["Your plugin name should be ",(0,o.jsx)(n.em,{children:"all lowercase"}),", and have ",(0,o.jsx)(n.em,{children:"underscores"})," divide any words. Example: ",(0,o.jsx)(n.code,{children:"pireactor_relay_plugin"})," is fine, but ",(0,o.jsx)(n.code,{children:"pioreactor-relay-plugin"})," is not, nor is ",(0,o.jsx)(n.code,{children:"Pioreactor-Relay-Plugin"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["However, your ",(0,o.jsx)(n.em,{children:"distribution package"})," name should be lowercase and have ",(0,o.jsx)(n.em,{children:"dashes"})," instead of underscores (it's a Python thing: I agree, this is confusing, I'll walk you through it). You can just replace any underscores with dashes: so our example distribution package name is ",(0,o.jsx)(n.code,{children:"pioreactor-relay-plugin"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Later in these steps, we'll reference these names as follows:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"PLUGIN_NAME"}),": should be the name in all lowercase with underscores. Example: ",(0,o.jsx)(n.code,{children:"pioreactor_relay_plugin"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"DISTRIBUTION-NAME"}),": should be the name in all lowercase with dashes. Example: ",(0,o.jsx)(n.code,{children:"pioreactor-relay-plugin"})]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"organizing-your-files",children:"Organizing your files"}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["Note that the way files are organized may depend on if your plugin is an ",(0,o.jsx)(n.strong,{children:"automation"})," or a ",(0,o.jsx)(n.strong,{children:"background job"}),". Plugins can install both automations and jobs."]})}),"\n",(0,o.jsxs)(n.p,{children:["Consider an example plugin: a plugin named ",(0,o.jsx)(n.code,{children:"pioreactor_relay_plugin"})," that implements a ",(0,o.jsx)(n.em,{children:"background job"})," which just turns on or off a PWM channel. Follow the file organization here: ",(0,o.jsx)(n.a,{href:"https://github.com/CamDavidsonPilon/pioreactor-relay-plugin",children:"CamDavidsonPilon/pioreactor-relay-plugin"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Here's a general directory outline of how your files should be organized for a job:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\ud83d\udcc1 <DISTRIBUTION-NAME (with dashes)>\n\u251c\u2500 \ud83d\udcc1 <PLUGIN_NAME>\n\u2502  \u251c\u2500 \ud83d\udcc1 ui\n\u2502  \u2502  \u251c\u2500 \ud83d\udcc1 contrib\n\u2502  \u2502  \u2502  \u251c\u2500 \ud83d\udcc1 jobs\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 \ud83d\udcdd <PLUGIN_NAME>.yaml\n\u2502  \u251c\u2500 \ud83d\udcdd __init__.py\n\u2502  \u251c\u2500 \ud83d\udcdd additional_config.ini\n\u2502  \u251c\u2500 \ud83d\udcdd my_plugin_code.py\n\u251c\u2500 \ud83d\udcdd LICENSE.txt\n\u251c\u2500 \ud83d\udcdd MANIFEST.in\n\u251c\u2500 \ud83d\udcdd README.md\n\u251c\u2500 \ud83d\udcdd setup.py\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The directory outline is very similar for an ",(0,o.jsx)(n.strong,{children:"automation plugin"})," &#151 the only difference is the location of the ",(0,o.jsx)(n.code,{children:".yaml"})," file."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\ud83d\udcc1 <DISTRIBUTION-NAME with dashes>\n\u251c\u2500 \ud83d\udcc1 <PLUGIN_NAME>\n\u2502  \u251c\u2500 \ud83d\udcc1 ui\n\u2502  \u2502  \u251c\u2500 \ud83d\udcc1 contrib\n\u2502  \u2502  \u2502  \u251c\u2500 \ud83d\udcc1 automations\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 \ud83d\udcc1 <AUTOMATION TYPE (one of {dosing, led, temperature})>\n\u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 \ud83d\udcdd <PLUGIN_NAME>.yaml\n\u2502  \u251c\u2500 \ud83d\udcdd __init__.py\n\u2502  \u251c\u2500 \ud83d\udcdd additional_config.ini\n\u2502  \u251c\u2500 \ud83d\udcdd my_plugin_code.py\n\u251c\u2500 \ud83d\udcdd LICENSE.txt\n\u251c\u2500 \ud83d\udcdd README.md\n\u251c\u2500 \ud83d\udcdd MANIFEST.in\n\u251c\u2500 \ud83d\udcdd setup.py\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Start by creating a new folder for your plugin, equal to the distribution name (the name with dashes). In our case, we named it ",(0,o.jsx)(n.code,{children:"pioreactor-relay-plugin"}),". This ",(0,o.jsx)(n.strong,{children:"top level folder"})," will contain five important parts:"]}),"\n",(0,o.jsxs)(n.h4,{id:"1-the-subfolder-plugin_name-containing-your-plugins-code",children:["1. The subfolder ",(0,o.jsx)(n.code,{children:"<PLUGIN_NAME>"})," containing your plugin's code"]}),"\n",(0,o.jsxs)(n.p,{children:["Within the top level directory, we created a sub-directory called ",(0,o.jsx)(n.code,{children:"<PLUGIN_NAME>"}),"."]}),"\n",(0,o.jsxs)(n.h4,{id:"2-a-license-text-file-named-licensetxt",children:["2. A license text file, named ",(0,o.jsx)(n.code,{children:"LICENSE.txt"})]}),"\n",(0,o.jsxs)(n.p,{children:["A common license for software is the ",(0,o.jsx)(n.a,{href:"https://opensource.org/licenses/MIT",children:"MIT license"}),"."]}),"\n",(0,o.jsxs)(n.h4,{id:"3-a-manifest-file-named-manifestin",children:["3. A MANIFEST file, named ",(0,o.jsx)(n.code,{children:"MANIFEST.in"})]}),"\n",(0,o.jsxs)(n.p,{children:["When creating a Python package, there's a default set of files that are included. To assure that our additional configuration and yaml files are included, create a ",(0,o.jsx)(n.code,{children:"MANIFEST.in"})," file and paste the following:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"recursive-include <PLUGIN_NAME>/ui/ *.yaml\ninclude <PLUGIN_NAME>/additional_config.ini\n"})}),"\n",(0,o.jsxs)(n.h4,{id:"4-a-readmemd",children:["4. A ",(0,o.jsx)(n.code,{children:"README.md"})]}),"\n",(0,o.jsx)(n.p,{children:"Write a few notes with general information on your plugin to guide users. Call out any additional installation steps, or hardware required. This is a markdown document."}),"\n",(0,o.jsxs)(n.h4,{id:"5-a-python-setuppy-file",children:["5. A Python ",(0,o.jsx)(n.code,{children:"setup.py"})," file"]}),"\n",(0,o.jsxs)(n.p,{children:["Create a Python file called ",(0,o.jsx)(n.code,{children:"setup.py"})," and copy & paste the following. Make changes based on your own plugin information."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# -*- coding: utf-8 -*-\nfrom setuptools import setup, find_packages\n\nsetup(\n    name="<DISTRIBUTION-NAME (with dashes)>",\n    version="<VERSION>",\n    license_files = (\'LICENSE.txt\',),\n    description="<DESCRIPTION OF PLUGIN>",\n    long_description=open("README.md").read(),\n    long_description_content_type="text/markdown",\n    author_email="<EMAIL>",\n    author="<NAME>",\n    url="<A HOMEPAGE>",\n    packages=find_packages(),\n    include_package_data=True,\n    install_requires=[], # PROVIDE OTHER PYTHON REQUIREMENTS, ex: "pioreactor>=23.6.0", "numpy>=1.0"\n    entry_points={\n        "pioreactor.plugins": "<PLUGIN_NAME> = <PLUGIN_NAME>"\n    },\n)\n'})}),"\n",(0,o.jsxs)(n.h3,{id:"contents-of-the-subfolder-plugin_name",children:["Contents of the subfolder, ",(0,o.jsx)(n.code,{children:"<PLUGIN_NAME>"})]}),"\n",(0,o.jsx)(n.h4,{id:"1-your-plugins-python-files",children:"1. Your plugins Python files"}),"\n",(0,o.jsxs)(n.p,{children:["This Python file contains the core code for your plugin. If your plugin is implementing a background job, then there should be a\nfunction decorated with ",(0,o.jsx)(n.code,{children:"@click.command"})," at the bottom of the file. See example ",(0,o.jsx)(n.a,{href:"https://github.com/CamDavidsonPilon/pioreactor-relay-plugin/blob/e25b46997d6e6b3b1b2e2bf1141299ddba4eaa49/pioreactor_relay_plugin/relay.py#L79-L93",children:"here"}),". For discovery reasons, this function's name ",(0,o.jsxs)(n.strong,{children:["should start with ",(0,o.jsx)(n.code,{children:"click_"})]}),"."]}),"\n",(0,o.jsxs)(n.h4,{id:"2-a-python-__init__py-file",children:["2. A Python ",(0,o.jsx)(n.code,{children:"__init__.py"})," file"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"If implementing an automation:"}),"\nImport the Class of your automation file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from <SUBFOLDER CONTAINING PLUGIN>.<PYTHON FILE NAME> import <CLASS NAME>\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"If implementing a job:"}),"\nThis will contain an ",(0,o.jsx)(n.code,{children:"import"})," statement such as the following:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from <PLUGIN_NAME>.<PYTHON FILE NAME> import <PLUGIN CLICK FUNCTION>\n"})}),"\n",(0,o.jsx)(n.p,{children:"This imports the function within our plugin file that executes our plugin action."}),"\n",(0,o.jsx)(n.p,{children:"Example for the relay plugin:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from pioreactor_relay_plugin.relay import click_relay\n"})}),"\n",(0,o.jsxs)(n.p,{children:["where ",(0,o.jsx)(n.code,{children:"click_relay"})," is the function decorated with ",(0,o.jsx)(n.code,{children:"@click.command"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.h4,{id:"3-optional-a-configuration-file-named-additional_configini",children:["3. Optional: A configuration file, named ",(0,o.jsx)(n.code,{children:"additional_config.ini"})]}),"\n",(0,o.jsxs)(n.p,{children:["This configuration file will contain additional configs that we want to add to our list of existing Configurations on the Pioreactor web interface. This file will be merged with the existing ",(0,o.jsx)(n.code,{children:"config.ini"})," when the plugin is installed."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:i(44636).Z+"",width:"951",height:"557"})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["A convention we've tried to follow is to use the section name convention of ",(0,o.jsx)(n.code,{children:"[<job_name>.config]"})," or ",(0,o.jsx)(n.code,{children:"[<automation_name>.config]"})," in the configuration files. For example, our relay job has ",(0,o.jsx)(n.code,{children:"[relay.config]"})," in its ",(0,o.jsx)(n.code,{children:"additional_config.ini"})," and settings under it."]})}),"\n",(0,o.jsx)(n.h4,{id:"4-optional-adding-details-for-the-ui",children:"4. Optional: Adding details for the UI"}),"\n",(0,o.jsx)(n.h5,{id:"if-implementing-a-job",children:"If implementing a job:"}),"\n",(0,o.jsxs)(n.p,{children:["Within ",(0,o.jsx)(n.code,{children:"<PLUGIN_NAME>"})," folder, create subfolders named ",(0,o.jsx)(n.code,{children:"ui/contrib/jobs"}),". For a job, create a ",(0,o.jsx)(n.code,{children:".yaml"})," file that looks like the following format. The name of the yaml can be anything, but convention is to use the ",(0,o.jsx)(n.code,{children:"<job_name>.yaml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"---\ndisplay_name:  # human readable name\njob_name: # `job_name` as defined in your Python file\ndisplay: # bool; true to display on the /Pioreactors card\nsource: # name of your plugin\ndescription: # description of what your plugin does\npublished_settings:\n  - key:  # as defined in Python\n    unit: # unit (ml, lux, AU, etc.)\n    label: # human readable name\n    description: # description of your setting\n    type:  # one of numeric, boolean, string, json\n    default: # provide a default value, often null\n    display: # bool; true to display on the /Pioreactors card\n  - key: ...\n    unit: ...\n  ...\n"})}),"\n",(0,o.jsxs)(n.p,{children:["There are lots of examples of job yaml files ",(0,o.jsx)(n.a,{href:"https://github.com/Pioreactor/pioreactorui/tree/master/contrib/jobs",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h5,{id:"if-implementing-an-automation",children:"If implementing an automation:"}),"\n",(0,o.jsxs)(n.p,{children:["In the case of creating an ",(0,o.jsx)(n.strong,{children:"automation plugin"}),", create subfolder(s) with ",(0,o.jsx)(n.code,{children:"ui/contrib/automations/<AUTOMATION TYPE>"}),", where ",(0,o.jsx)(n.code,{children:"AUTOMATION TYPE"})," is one of ",(0,o.jsx)(n.code,{children:"dosing"}),", ",(0,o.jsx)(n.code,{children:"led"}),", or ",(0,o.jsx)(n.code,{children:"temperature"})," depending on your automation type. Create a yaml file with the following convention. The name of the yaml file can be anything, but by convention it's ",(0,o.jsx)(n.code,{children:"<automation_name>.yaml"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"---\ndisplay_name:  # human readable name\nautomation_name: # automation name as defined in your Python files\nsource: # name of your plugin\ndescription: # description of your plugin\nfields:\n  - key:  # as defined in Python\n    unit: # unit of your key\n    label: # human readable name\n    description: # description of your key\n  - key: ...\n    unit: ...\n"})}),"\n",(0,o.jsxs)(n.p,{children:["There are lots of examples of automation yaml files ",(0,o.jsx)(n.a,{href:"https://github.com/Pioreactor/pioreactorui/tree/master/contrib/automations",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"5-optional-adding-tables-to-the-sql-database-and-exposing-them-on-the-export-data-page",children:"5. Optional: adding tables to the SQL database and exposing them on the Export Data page"}),"\n",(0,o.jsxs)(n.p,{children:["You can also add a file called ",(0,o.jsx)(n.code,{children:"additional_sql.sql"})," that will run against the SQLite database. For example, a CO\u2082 sensor may want to create a new table in the database to store its sensor data. It's ",(0,o.jsx)(n.code,{children:"additional_sql.sql"})," may look like:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE IF NOT EXISTS co2_readings (\n    experiment               TEXT NOT NULL,\n    pioreactor_unit          TEXT NOT NULL,\n    timestamp                TEXT NOT NULL,\n    co2_reading_ppm          REAL\n);\n"})}),"\n",(0,o.jsx)(n.p,{children:"You also need to tell Pioreactor software how to populate this table from your source of data. Include the following in your code such that it executes when the plugin is loaded:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"a parser function that accepts a MQTT topic and payload, and returns a dictionary that maps to the new tables schema."}),"\n",(0,o.jsxs)(n.li,{children:["a ",(0,o.jsx)(n.code,{children:"TopicToParserToTable"})," object is created with the MQTT topics to listen to, the parser, and the table name to load to. This ",(0,o.jsx)(n.code,{children:"TopicToParserToTable"})," is provided to ",(0,o.jsx)(n.code,{children:"register_source_to_sink"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Example below for a CO2 sensor:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'...\nfrom pioreactor.background_jobs.leader.mqtt_to_db_streaming import produce_metadata\nfrom pioreactor.background_jobs.leader.mqtt_to_db_streaming import register_source_to_sink\nfrom pioreactor.background_jobs.leader.mqtt_to_db_streaming import TopicToParserToTable\nfrom pioreactor.utils import timing\n\n...\n\ndef parser(topic, payload) -> dict:\n    metadata = produce_metadata(topic)\n    return {\n        "experiment": metadata.experiment,\n        "pioreactor_unit": metadata.pioreactor_unit,\n        "timestamp": timing.current_utc_timestamp(),\n        "co2_reading_ppm": float(payload),\n    }\n\n\nregister_source_to_sink(\n    TopicToParserToTable(\n        ["pioreactor/+/+/scd_reading/co2", "pioreactor/+/+/co2_reading/co2"],\n        parser,\n        "co2_readings",\n    )\n)\n\n...\n'})}),"\n",(0,o.jsxs)(n.admonition,{type:"note",children:[(0,o.jsxs)(n.p,{children:["You also need to add the following to your ",(0,o.jsx)(n.code,{children:"MANIFEST.in"}),":"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"...\ninclude <PLUGIN_NAME>/additional_sql.sql\n"})})]}),"\n",(0,o.jsxs)(n.p,{children:["See an example plugin that uses this idea ",(0,o.jsx)(n.a,{href:"https://github.com/Pioreactor/co2-reading-plugin",children:"here"}),"."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.p,{children:["Now that you've added the code for adding to the database, you can also allow users to export your data from the UI's Export Data page. To do this, added a new folder ",(0,o.jsx)(n.code,{children:"/exportable_datasets"})," to your project's source folder (along side the ",(0,o.jsx)(n.code,{children:"__init__.py"})," file), and add a YAML file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"dataset_name: some_unique_dataset_name\ndefault_order_by: timestamp # for example\ndescription: A lovely description which shows up in the UI\ndisplay_name: A lovely name which shows up in the UI\nhas_experiment: true # does your SQL table have an experiment column.?\nhas_unit: true # does your SQL table have an pioreactor_unit column.?\nsource: your_plugin_name\ntable: the_target_table # see also query below\ntimestamp_columns:\n- timestamp\nalways_partition_by_unit: false\nquery: SELECT * FROM the_target_table WHERE reading < 4 AND ... # optional: you can specify a query.\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can add multiple dataset YAML files, too."}),"\n",(0,o.jsxs)(n.admonition,{type:"note",children:[(0,o.jsx)(n.p,{children:"Include the following in your MANIFEST.IN:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"recursive-include your_plugin_name/exportable_datasets *.yaml\n"})})]}),"\n",(0,o.jsx)(n.h4,{id:"6-optional-adding-a-custom-chart-to-the-ui",children:"6. Optional: adding a custom chart to the UI"}),"\n",(0,o.jsx)(n.p,{children:"To add a chart that display real-time and historical data (provided by MQTT and SQL store respectively), you can do the following:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["In a new folder named ",(0,o.jsx)(n.code,{children:"ui/contrib/charts"})," in your project, add a YAML file as described ",(0,o.jsx)(n.a,{href:"/developer-guide/chart-to-ui",children:"here"}),". The name of the file can by the ",(0,o.jsx)(n.code,{children:"chart_key"})," field, append with ",(0,o.jsx)(n.code,{children:".yaml"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["In your ",(0,o.jsx)(n.code,{children:"additional_config.ini"}),", add a new entry to be merged:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[ui.overview.charts]\n<your chart key>=1\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["You'll need to make sure your database table has the necessary fields. See details under ",(0,o.jsx)(n.code,{children:"data_source"})," in the ",(0,o.jsx)(n.a,{href:"/developer-guide/chart-to-ui",children:"docs here"}),"."]})}),"\n",(0,o.jsxs)(n.p,{children:["See an example plugin that uses this idea ",(0,o.jsx)(n.a,{href:"https://github.com/Pioreactor/co2-reading-plugin",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"7-optional-adding-post_install-and-pre_uninstall-bash-scripts",children:"7. Optional: adding post_install and pre_uninstall bash scripts."}),"\n",(0,o.jsxs)(n.p,{children:["If your plugin needs to edit the operating system, you can include either of the following files: ",(0,o.jsx)(n.code,{children:"post_install.sh"}),", or ",(0,o.jsx)(n.code,{children:"pre_uninstall.sh"}),". We have used these files to enable systemd services such that the job being installed will start at startup. Example ",(0,o.jsx)(n.a,{href:"https://github.com/Pioreactor/pioreactor-logs2slack/blob/master/pioreactor_logs2slack/post_install.sh",children:"post_install.sh"})," and ",(0,o.jsx)(n.a,{href:"https://github.com/Pioreactor/pioreactor-logs2slack/blob/master/pioreactor_logs2slack/pre_uninstall.sh",children:"pre_uninstall.sh"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"You'll need to append to your MANIFEST.in, too:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"include <PLUGIN_NAME>/post_install.sh\ninclude <PLUGIN_NAME>/pre_uninstall.sh\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For an example, see the ",(0,o.jsx)(n.a,{href:"https://github.com/Pioreactor/pioreactor-logs2slack",children:"logs2slack"})," plugin's repository."]}),"\n",(0,o.jsx)(n.h4,{id:"8-optional-only-installing-on-leader-pioreactor",children:"8. Optional: only installing on leader Pioreactor."}),"\n",(0,o.jsxs)(n.p,{children:["Some plugins may only want to be installed on the leader. For example, if they are changing the UI or database. To signal that a plugin should only be installed on the leader (and no-op on workers), add an empty file named ",(0,o.jsx)(n.code,{children:"LEADER_ONLY"})," to the folder."]}),"\n",(0,o.jsx)(n.p,{children:"You'll need to append to your MANIFEST.in, too:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"include <PLUGIN_NAME>/LEADER_ONLY\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For an example, see the ",(0,o.jsx)(n.a,{href:"https://github.com/Pioreactor/pioreactor-logs2slack",children:"logs2slack"})," plugin's repository."]}),"\n",(0,o.jsx)(n.h2,{id:"create-a-python-package-on-pypi",children:"Create a Python package on PyPI"}),"\n",(0,o.jsxs)(n.p,{children:["Create an account on ",(0,o.jsx)(n.a,{href:"https://pypi.org/",children:"https://pypi.org/"}),". Make sure to verify your email."]}),"\n",(0,o.jsx)(n.p,{children:"On your command line, type the following:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"pip install twine\npip install --upgrade build\npython -m build --wheel\t\t\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This creates a ",(0,o.jsx)(n.code,{children:".whl"})," file in a ",(0,o.jsx)(n.code,{children:"dist/"})," folder (that will be created). Next, we upload the ",(0,o.jsx)(n.code,{children:"whl"})," file to PyPI:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"twine upload dist/<THE .WHL FILE>\n"})}),"\n",(0,o.jsx)(n.p,{children:"You will then be prompted for a username and password. Use the credentials for your PyPI account. Then, your package is uploaded and viewable at the link provided in the output!"}),"\n",(0,o.jsx)(n.admonition,{title:"Note",type:"tip",children:(0,o.jsxs)(n.p,{children:["Before you build a new wheel, it's good practice to clean up your previous build.",(0,o.jsx)(n.br,{}),"\n","This can be done using ",(0,o.jsx)(n.code,{children:"python setup.py clean --all"})," on the command line."]})}),"\n",(0,o.jsx)(n.h2,{id:"installing-your-python-package-on-your-cluster",children:"Installing your Python package on your cluster"}),"\n",(0,o.jsxs)(n.p,{children:["A plugin can be installed through the command line on a leader using ",(0,o.jsx)(n.code,{children:"pio"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"pio plugin install <DISTRIBUTION-NAME OR PLUGIN_NAME>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To install a given plugin on the leader and all workers connected to the leader in a cluster, ",(0,o.jsx)(n.code,{children:"pios plugins install"})," can be used."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"pios plugin install <DISTRIBUTION-NAME OR PLUGIN_NAME>\n"})}),"\n",(0,o.jsx)(n.h2,{id:"sharing-your-plugin-with-the-community",children:"Sharing your plugin with the community"}),"\n",(0,o.jsxs)(n.p,{children:["To give your plugin further reach, we've provided an option to add it to the web interface. You will need to edit the ",(0,o.jsx)(n.strong,{children:"plugins.json"})," file within our ",(0,o.jsx)(n.a,{href:"https://github.com/Pioreactor/list-of-plugins",children:"Pioreactor repository, list-of-plugins"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"There are two ways to do this:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Create an issue to have us edit the plugins.json file for you."}),"\n",(0,o.jsx)(n.li,{children:"Fork from our repository to edit the plugins.json file, then create a pull request."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:i(25178).Z+"",width:"1896",height:"798"})}),"\n",(0,o.jsx)(n.p,{children:"In both cases, we will evaluate your plugin to ensure code quality and all requirements are met."}),"\n",(0,o.jsxs)(n.p,{children:["Once your plugin is accepted, it will appear on the Plugins tab on the Pioreactor web interface. Users in the community can now easily click ",(0,o.jsx)(n.em,{children:"Install"})," to download your plugin onto their Pioreactors!"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:i(77503).Z+"",width:"1893",height:"925"})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},44636:(e,n,i)=>{i.d(n,{Z:()=>o});const o=i.p+"assets/images/python-package-new-config-fc1c3fe6948cde33a3e00db59cf98588.png"},77503:(e,n,i)=>{i.d(n,{Z:()=>o});const o=i.p+"assets/images/python-package-plugins-b119d590d45ad781923cd0f333bdfc96.png"},25178:(e,n,i)=>{i.d(n,{Z:()=>o});const o=i.p+"assets/images/python-package-pull-or-issue-050b26469751ff2da3986a6c75cbfb58.png"},11151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>l});var o=i(67294);const t={},a=o.createContext(t);function l(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);