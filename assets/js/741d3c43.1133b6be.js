"use strict";(self.webpackChunkpioreactor=self.webpackChunkpioreactor||[]).push([[3866],{26229:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=n(85893),i=n(11151);const o={title:"Experiment profiles schema",slug:"/experiment-profiles-schema"},s=void 0,a={id:"Extending your Pioreactor/Experiment Profiles/experiment-profiles-schema",title:"Experiment profiles schema",description:"Below is a schema for experiment profiles. We also do a run-time check",source:"@site/user-guide/03-Extending your Pioreactor/04-Experiment Profiles/10-experiment-profiles-schema.md",sourceDirName:"03-Extending your Pioreactor/04-Experiment Profiles",slug:"/experiment-profiles-schema",permalink:"/user-guide/experiment-profiles-schema",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Experiment profiles schema",slug:"/experiment-profiles-schema"},sidebar:"tutorialSidebar",previous:{title:"Creating and editing experiment profiles",permalink:"/user-guide/create-edit-experiment-profiles"},next:{title:"Standard curves for OD600 readings",permalink:"/user-guide/calibrate-od600"}},p={},l=[{value:"Examples",id:"examples",level:3}];function c(e){const t={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Below is a schema for experiment profiles. We also do a run-time check"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:'# Main structure\nexperiment_profile_name: <string> # Name of the experiment profile\n\nmetadata: # Optional\n  author: <string> # Author of the experiment profile\n  description: <string> # Description of the experiment profile\n\nplugins: # Optional\n  - name: <string> # Name of the plugin\n    min_version: <string> # Minimum required version of the plugin\n\ncommon: # Optional: jobs that are common for all Pioreactors\n  jobs:\n    <job_name>:\n      actions:\n        - type: <string> # Type of action: "start", "pause", "resume", "stop", "update", or "log"\n          hours_elapsed: <float> # When the action is scheduled (in hours after experiment start)\n          if: <string> # optional\n          options: # Optional: parameters for the action. If type=log, message= is required here.\n            <option_name>: <value>\n          arguments: <list> # Optional: arguments for the action\n\npioreactors: # Optional: jobs that are specific to some Pioreactors\n  label: <string> # optional\n  <pioreactor_unit_name>:\n    jobs:\n      <job_name>:\n        actions:\n          - type: <string> # Type of action: "start", "pause", "resume", "stop", or "update"\n            hours_elapsed: <float> # When the action is scheduled (in hours after experiment start)\n            options: # Optional: parameters for the action\n              <option_name>: <value>\n'})}),"\n",(0,r.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(t.p,{children:["See examples of experiment profiles ",(0,r.jsx)(t.a,{href:"https://github.com/Pioreactor/experiment_profile_examples",children:"here"}),"."]})]})}function m(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>s});var r=n(67294);const i={},o=r.createContext(i);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);