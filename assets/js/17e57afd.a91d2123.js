"use strict";(self.webpackChunkpioreactor=self.webpackChunkpioreactor||[]).push([[8961],{92544:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var o=t(85893),s=t(11151);const r={title:"Creating and editing experiment profiles",slug:"/create-edit-experiment-profiles"},i=void 0,a={id:"Extending your Pioreactor/Experiment Profiles/create-edit-experiment-profiles",title:"Creating and editing experiment profiles",description:"Using the UI",source:"@site/user-guide/03-Extending your Pioreactor/04-Experiment Profiles/02-create-edit-experiment-profiles.md",sourceDirName:"03-Extending your Pioreactor/04-Experiment Profiles",slug:"/create-edit-experiment-profiles",permalink:"/user-guide/create-edit-experiment-profiles",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Creating and editing experiment profiles",slug:"/create-edit-experiment-profiles"},sidebar:"tutorialSidebar",previous:{title:"Intro to experiment profiles",permalink:"/user-guide/experiment-profiles"},next:{title:"Experiment profiles schema",permalink:"/user-guide/experiment-profiles-schema"}},d={},l=[{value:"Using the UI",id:"using-the-ui",level:3},{value:"Alternatively: On the command line",id:"alternatively-on-the-command-line",level:4},{value:"Writing profiles",id:"writing-profiles",level:2},{value:"Adding a name, author, and description",id:"adding-a-name-author-and-description",level:3},{value:"<code>common</code> and <code>pioreactors</code> blocks",id:"common-and-pioreactors-blocks",level:3},{value:"<code>hours_elapsed</code> refers to the profile start time",id:"hours_elapsed-refers-to-the-profile-start-time",level:3},{value:"How the <code>if</code> directive works",id:"how-the-if-directive-works",level:3},{value:"How expressions work",id:"how-expressions-work",level:3},{value:"Expressions in options",id:"expressions-in-options",level:3},{value:"Expressions in the <code>common</code> block",id:"expressions-in-the-common-block",level:3},{value:"Built-in functions in expressions",id:"built-in-functions-in-expressions",level:3},{value:"Different action types",id:"different-action-types",level:2},{value:"<code>start</code> and <code>stop</code>",id:"start-and-stop",level:3},{value:"<code>pause</code> and <code>resume</code>",id:"pause-and-resume",level:3},{value:"<code>log</code>",id:"log",level:3},{value:"<code>when</code>",id:"when",level:3},{value:"<code>repeat</code>",id:"repeat",level:3},{value:"YAML syntax check, and indentation problems",id:"yaml-syntax-check-and-indentation-problems",level:2},{value:"Tips",id:"tips",level:3},{value:"<code>Expected `object`, got `array` - at ` ... .options`</code>",id:"expected-object-got-array---at---options",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h3,{id:"using-the-ui",children:"Using the UI"}),"\n",(0,o.jsxs)(n.p,{children:["Experiment profiles can be managed in the UI at ",(0,o.jsx)(n.a,{href:"http://pioreactor.local/experiment-profiles",children:"http://pioreactor.local/experiment-profiles"}),". See video below for a demonstration."]}),"\n",(0,o.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/yxxj0ncTxws?si=42eGY8yIt5D84qUA",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,o.jsx)(n.h4,{id:"alternatively-on-the-command-line",children:"Alternatively: On the command line"}),"\n",(0,o.jsxs)(n.p,{children:["All profiles are stored on the leader's disk under ",(0,o.jsx)(n.code,{children:"~/.pioreactor/experiment_profiles/"}),", allowing you can create and edit profiles in this directory, as well."]}),"\n",(0,o.jsx)(n.h2,{id:"writing-profiles",children:"Writing profiles"}),"\n",(0,o.jsx)(n.h3,{id:"adding-a-name-author-and-description",children:"Adding a name, author, and description"}),"\n",(0,o.jsx)(n.p,{children:"It's a good idea to give your profile a descriptive and unique name. This way it will be easier to find later. Also providing a detailed description will help your colleagues (and future self!) understand what the profile accomplishes."}),"\n",(0,o.jsxs)(n.h3,{id:"common-and-pioreactors-blocks",children:[(0,o.jsx)(n.code,{children:"common"})," and ",(0,o.jsx)(n.code,{children:"pioreactors"})," blocks"]}),"\n",(0,o.jsxs)(n.p,{children:["Any tasks in the ",(0,o.jsx)(n.code,{children:"common"})," block will execute that task for ",(0,o.jsx)(n.em,{children:"all"})," workers assigned to the current experiment. The ",(0,o.jsx)(n.code,{children:"pioreactors"})," block is where you can write tasks for specific Pioreactors. For example, you may want the stirring to be on for all Pioreactors, but you want the temperature to be different for your two workers:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"experiment_profile_name: stirring with different temperatures\n\nmetadata:\n  author: Cameron DP\n  description: turn on stirring for all workers, but set the temperature to be different between them.\n\ncommon:\n  jobs:\n    stirring:\n      actions:\n        - type: start\n          hours_elapsed: 0\n\npioreactors:\n   pio001:\n     jobs:\n       temperature_automation:\n         actions:\n           - type: start\n             hours_elapsed: 0.0\n             options:\n               automation_name: thermostat\n               target_temperature: 35\n   pio002:\n    jobs:\n      temperature_automation:\n        actions:\n          - type: start\n            hours_elapsed: 0.0\n            options:\n              automation_name: thermostat\n              target_temperature: 32\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"hours_elapsed-refers-to-the-profile-start-time",children:[(0,o.jsx)(n.code,{children:"hours_elapsed"})," refers to the profile start time"]}),"\n",(0,o.jsxs)(n.p,{children:["When writing a profile, note that the ",(0,o.jsx)(n.code,{children:"hours_elapsed"})," field refers to when the experiment profile started, and not when the experiment started."]}),"\n",(0,o.jsxs)(n.h3,{id:"how-the-if-directive-works",children:["How the ",(0,o.jsx)(n.code,{children:"if"})," directive works"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"if"})," directive can be included in any action to conditionally execute it or not. The ",(0,o.jsx)(n.code,{children:"if"})," statement is evaluated ",(0,o.jsx)(n.em,{children:"when the action is to be executed"})," (i.e., when ",(0,o.jsx)(n.code,{children:"elapsed_hours"})," has passed)."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"if"})," directive is a general boolean expression, and to common operators can be used:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"and"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"or"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"not"})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"True"})," and ",(0,o.jsx)(n.code,{children:"False"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"("})," and ",(0,o.jsx)(n.code,{children:")"})]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Also included are numbers (floats), and strings (examples later). The comparison operators are:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"=="})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:">="})," and ",(0,o.jsx)(n.code,{children:"<="})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:">"})," and ",(0,o.jsx)(n.code,{children:"<"})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The operators addition ",(0,o.jsx)(n.code,{children:"+"}),", subtraction ",(0,o.jsx)(n.code,{children:"-"}),", multiplication ",(0,o.jsx)(n.code,{children:"*"}),", and division ",(0,o.jsx)(n.code,{children:"/"})," are allowed on floats, as well. The power of ",(0,o.jsx)(n.code,{children:"if"})," comes when you combine it with expressions, see below:"]}),"\n",(0,o.jsx)(n.h3,{id:"how-expressions-work",children:"How expressions work"}),"\n",(0,o.jsx)(n.p,{children:"Expressions are our way to fetch dynamic data, provided from jobs, during execution of profiles. For example, the following:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"pio1:stirring:target_rpm >= 500\n"})}),"\n",(0,o.jsxs)(n.p,{children:["will fetch the ",(0,o.jsx)(n.code,{children:"target_rpm"})," from ",(0,o.jsx)(n.code,{children:"pio1"}),"'s ",(0,o.jsx)(n.code,{children:"stirring"})," job ",(0,o.jsx)(n.em,{children:"at the time the action is to be executed"}),",  compare it to ",(0,o.jsx)(n.code,{children:"500"}),", and return true or false. To use this in an example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"    stirring:\n     ...\n     - type: update\n       hours_elapsed: 6.0\n       if: pio1:stirring:target_rpm >= 500\n       options:\n         target_rpm: 400\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["will check, after 6 hours, if the ",(0,o.jsx)(n.code,{children:"target_rpm"})," is above 500, and if true, will update the target RPM to 400."]}),"\n",(0,o.jsxs)(n.p,{children:["You can also compare against strings. For example, to stop a job if the temperature automation running is equal to ",(0,o.jsx)(n.code,{children:"thermostat"}),", use:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"    temperature_automation:\n     ...\n     - type: stop\n       hours_elapsed: 6.0\n       if: pio1:temperature_automation:automation_name == thermostat\n\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Where do these dynamic values come from? Each job has ",(0,o.jsx)(n.code,{children:"published_settings"})," that can be referenced (refer to the job's source code to all ",(0,o.jsx)(n.code,{children:"published_settings"})," for a job, or they are published in MQTT)."]}),"\n",(0,o.jsxs)(n.p,{children:["Some published settings have are actually nested json blobs, but we need either numbers or strings to compare in our boolean expression. You can index these json blobs in the boolean expression using ",(0,o.jsx)(n.code,{children:"."}),", for example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"    temperature_automation:\n     ...\n     - type: update\n       hours_elapsed: 6.0\n       if: pio1:temperature_automation:temperature.temperature <= 30\n       options:\n         target_temperature: 32\n"})}),"\n",(0,o.jsxs)(n.p,{children:["We use ",(0,o.jsx)(n.code,{children:"temperature.temperature"})," because the ",(0,o.jsx)(n.code,{children:"temperature"}),' published setting is a json blob that looks like the following, and we wish to reference the "temperature" field in the blob:']}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n    "temperature": <float>,\n    "timestamp": <ISO 8601 timestamp>\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"expressions-in-options",children:"Expressions in options"}),"\n",(0,o.jsxs)(n.p,{children:["Similar to an ",(0,o.jsx)(n.code,{children:"if"})," directive using dynamic data, options can also have dynamic data (see notes above for syntax, too). However, to distinguish between a string and an expression, an expression ",(0,o.jsx)(n.strong,{children:"must"})," be wrapped in ",(0,o.jsx)(n.code,{children:"${{ ... }}"}),". For example, consider the following ",(0,o.jsx)(n.code,{children:"update"})," action:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"pioreactors:\n  worker1:\n    jobs:\n      stirring:\n        actions:\n          - type: start\n            hours_elapsed: 0\n            options:\n              target_rpm: 500\n          - type: update\n            hours_elapsed: 12\n            options:\n              target_rpm: ${{ worker1:stirring:target_rpm + 50 }}\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This will update the value of ",(0,o.jsx)(n.code,{children:"target_rpm"})," to whatever its current value is (after 1 hour), and add 50 to it."]}),"\n",(0,o.jsxs)(n.p,{children:["You can use any pioreactor and any job in an expression - you aren't limited to the ",(0,o.jsx)(n.code,{children:"job"})," your editing. For example, the ",(0,o.jsx)(n.code,{children:"update"})," below will dynamically set the ",(0,o.jsx)(n.code,{children:"target_rpm"})," to a function of optical density."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"pioreactors:\n  worker1:\n    jobs:\n      stirring:\n        actions:\n          - type: start\n            hours_elapsed: 0\n            options:\n              target_rpm: 500\n          - type: update\n            hours_elapsed: 12\n            options:\n              target_rpm: ${{ worker1:stirring:target_rpm + worker1:od_reading:od1.od * 10 }}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"expressions-in-the-common-block",children:["Expressions in the ",(0,o.jsx)(n.code,{children:"common"})," block"]}),"\n",(0,o.jsxs)(n.p,{children:["Expressions can reference individual Pioreactors, for example ",(0,o.jsx)(n.code,{children:"worker1:stirring:target_rpm"}),", but what if you want to specify all Pioreactors in an expression? This is useful for using expressions in the ",(0,o.jsx)(n.code,{children:"common"})," block. The syntax for this is to use the following"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"::<job_name>:setting\n"})}),"\n",(0,o.jsx)(n.p,{children:"For example, to conditionally change the stirring RPM in all Pioreactors, and to update it:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"common:\n  jobs:\n    stirring:\n      actions:\n        - type: update\n          hours_elapsed: 6\n          if: ${{ ::stirring:target_rpm <= 500 }}\n          options:\n            target_rpm: 500\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can also use this syntax in ",(0,o.jsx)(n.code,{children:"options"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"common:\n  jobs:\n    stirring:\n      actions:\n        - type: update\n          hours_elapsed: 6\n          if: ${{ ::stirring:target_rpm <= 500 }}\n          options:\n            target_rpm: ${{ ::stirring:target_rpm + 10 * ::od_reading:od1.od }}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"built-in-functions-in-expressions",children:"Built-in functions in expressions"}),"\n",(0,o.jsx)(n.p,{children:"There's also some built-in functions you can use in expressions:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"random()"})," produces a random number between 0 and 1."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"unit()"})," returns the unit the expression is evaluated for."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"job_name()"})," returns the job name the expression is evaluated for."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"experiment()"})," returns the experiment the expression is evaluated for."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"different-action-types",children:"Different action types"}),"\n",(0,o.jsxs)(n.h3,{id:"start-and-stop",children:[(0,o.jsx)(n.code,{children:"start"})," and ",(0,o.jsx)(n.code,{children:"stop"})]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"start"})," will start a job or action, and ",(0,o.jsx)(n.code,{children:"stop"})," will stop an job or action."]}),"\n",(0,o.jsxs)(n.h3,{id:"pause-and-resume",children:[(0,o.jsx)(n.code,{children:"pause"})," and ",(0,o.jsx)(n.code,{children:"resume"})]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"pause"})," will pause a job or action, and ",(0,o.jsx)(n.code,{children:"resume"})," will resume a paused job or action."]}),"\n",(0,o.jsx)(n.h3,{id:"log",children:(0,o.jsx)(n.code,{children:"log"})}),"\n",(0,o.jsx)(n.p,{children:"Log a message, and specify its logging level."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'actions:\n  - type: log\n    options:\n      message: "This is a message, and it can contain expressions like ${{unit()}}".\n      level: info\n\n'})}),"\n",(0,o.jsx)(n.h3,{id:"when",children:(0,o.jsx)(n.code,{children:"when"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"when"})," action is used to trigger an actions(s) ",(0,o.jsx)(n.em,{children:"the first time"})," the condition is satisfied. For example, you could start a chemostat when the OD rises above a threshold, or turn off heating when the temperature exceed some threshold, or log a message when some condition is met."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"when"})," action has a few required fields:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"condition"}),": this is an expression (see above) that when evaluated to ",(0,o.jsx)(n.code,{children:"true"}),", will execute the ",(0,o.jsx)(n.code,{children:"actions"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"actions"}),": this is a list of ",(0,o.jsx)(n.code,{children:"actions"})," to run when the expression evaluates to true."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"For example, the following section would start a chemostat when the OD reading is greater than 2.0 in all workers:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"common:\n  jobs:\n    od_reading:\n      actions:\n        - type: start\n    dosing_automation:\n      actions:\n        - type: when\n          condition: ${{::od_reading:od1.od > 2.0}}\n          hours_elapsed: 0\n          actions:\n            - type: start\n              hours_elapsed: 0\n              options:\n                automation_name: chemostat\n                volume: 0.6\n                duration: 10\n\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"hours_elapsed"})," works like an other action: it'll only start to check after ",(0,o.jsx)(n.code,{children:"hours_elapsed"})," hours have occurred since the start of execution."]}),"\n",(0,o.jsxs)(n.p,{children:["After the condition is met, the actions run, and the condition is never checked again. The ",(0,o.jsx)(n.code,{children:"when"})," is said to be ",(0,o.jsx)(n.em,{children:"exhausted"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"repeat",children:(0,o.jsx)(n.code,{children:"repeat"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"repeat"})," directive is the most powerful action, as it allows you loop actions over and over again to check for a condition change, update based on state, etc."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"repeat"})," action requires two new necessary fields:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"actions"}),": a list of actions (",(0,o.jsx)(n.code,{children:"start"}),", ",(0,o.jsx)(n.code,{children:"stop"}),", ",(0,o.jsx)(n.code,{children:"update"}),", etc.) that you want to repeat. The field ",(0,o.jsx)(n.code,{children:"hours_elapsed"})," refers to the start of the loop, ",(0,o.jsx)(n.em,{children:"not"})," when the profile starts."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"repeat_every_hours"}),": this is a float describing how long, in hours, the loop should last for. For example,  repeat an action every 2 hours, or generally: repeat a sequence of actions every X hours."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Your ",(0,o.jsx)(n.code,{children:"repeat"})," action should look like, for example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:" - type: repeat\n   hours_elapsed: 6.0 # when to start the looping, 6 hours\n   repeat_every_hours: 0.5 # perform the actions every 30 minutes\n   actions:\n     - type: update\n       hours_elapsed: 0.0\n       ...\n     - type: update\n       hours_elapsed: 0.1\n       ...\n"})}),"\n",(0,o.jsx)(n.p,{children:"Finally, there is more control using the other optional fields:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"max_hours"}),": this controls how long the loop should run for. For example, if ",(0,o.jsx)(n.code,{children:"repeat_every_hours"})," is ",(0,o.jsx)(n.code,{children:"0.5"})," (or 30 minutes), and ",(0,o.jsx)(n.code,{children:"max_hours"})," is ",(0,o.jsx)(n.code,{children:"6"}),", then the loop will repeat 12 times before exiting."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"while"}),": this is an expression, like ",(0,o.jsx)(n.code,{children:"if"}),", that runs at the start of each loop, including the first. For example, the following profile will run media until the OD is less than 3.0. We also remove waste so we don't overflow the vial. This is a really coarse turbidostat, and is just for demonstration - don't use this:"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["You can also use the ",(0,o.jsx)(n.code,{children:"if"})," directive to skip running the entire ",(0,o.jsx)(n.code,{children:"repeat"})," action, too."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"add_media:\n  actions:\n    - type: repeat\n      hours_elapsed: 6.0\n      repeat_every_hours: 0.0025 # every 9 seconds\n      while: ${{ worker1:od_reading:od1.od > 3.0 }}\n      actions:\n        - type: start\n          options:\n            volume: 1\nremove_waste:\n  actions:\n    - type: repeat\n      hours_elapsed: 6.0\n      repeat_every_hours: 0.0025 # every 9 seconds\n      while: ${{ worker1:od_reading:od1.od > 3.0 }}\n      actions:\n        - type: start\n          options:\n            volume: 1.5\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"yaml-syntax-check-and-indentation-problems",children:"YAML syntax check, and indentation problems"}),"\n",(0,o.jsx)(n.h3,{id:"tips",children:"Tips"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Check your YAML syntax with a tool like: ",(0,o.jsx)(n.a,{href:"https://www.yamllint.com/",children:"https://www.yamllint.com/"})]}),"\n",(0,o.jsx)(n.li,{children:"Note that indentation matters! For example, these mean different things, and only the second one is correct:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# correct \u2705\ncommon:\n  jobs:\n    temperature_automation:\n      actions:\n        - type: start\n          hours_elapsed: 0.0\n          options:\n            automation_name: thermostat # lined up!\n            target_temperature: 30\n\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# wrong \u274c\ncommon:\n  jobs:\n    temperature_automation:\n      actions:\n        - type: start\n          hours_elapsed: 0.0\n          options:\n          automation_name: thermostat # this should be indented to be a part of options\n          target_temperature: 30      # this should be indented to be a part of options\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"expected-object-got-array---at---options",children:(0,o.jsx)(n.code,{children:"Expected `object`, got `array` - at ` ... .options`"})}),"\n",(0,o.jsxs)(n.p,{children:["This is likely because you are using ",(0,o.jsx)(n.code,{children:"-"})," where you shouldn't:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# wrong \u274c\ncommon:\n  jobs:\n    temperature_automation:\n      actions:\n        - type: start\n          hours_elapsed: 0.0\n          options:\n            - automation_name: thermostat # don't put - here\n            - target_temperature: 30 # don't put - here\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# correct \u2705\ncommon:\n  jobs:\n    temperature_automation:\n      actions:\n        - type: start\n          hours_elapsed: 0.0\n          options:\n            automation_name: thermostat # don't put - here\n            target_temperature: 30 # don't put - here\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>i});var o=t(67294);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);