"use strict";(self.webpackChunkpioreactor=self.webpackChunkpioreactor||[]).push([[1699],{37221:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var i=n(85893),o=n(11151);const a={title:"Custom & additional pumps for dosing automations",slug:"/writing-pump-software"},s=void 0,r={id:"Custom pumps/writing-pump-software",title:"Custom & additional pumps for dosing automations",description:"The following provides solutions to:",source:"@site/developer-guide/08-Custom pumps/20-writing-pump-software.md",sourceDirName:"08-Custom pumps",slug:"/writing-pump-software",permalink:"/developer-guide/writing-pump-software",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"Custom & additional pumps for dosing automations",slug:"/writing-pump-software"},sidebar:"tutorialSidebar",previous:{title:"Turning your plugins into a Python package to share",permalink:"/developer-guide/plugin-as-python-package"},next:{title:"Introduction",permalink:"/developer-guide/data-stores-intro"}},d={},l=[{value:"Using external pumps with a custom automation",id:"using-external-pumps-with-a-custom-automation",level:3},{value:"Adding additional pumps beyond media and alt-media",id:"adding-additional-pumps-beyond-media-and-alt-media",level:3}];function m(e){const t={admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"The following provides solutions to:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"using a different pumping system for the Pioreactor instead of our peristaltic pumps"}),"\n",(0,i.jsx)(t.li,{children:"adding additional pumps to the Pioreactor (i.e., more than media and alt-media). These additional pumps\nmay be provided via another system, for example an Arduino."}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"using-external-pumps-with-a-custom-automation",children:"Using external pumps with a custom automation"}),"\n",(0,i.jsxs)(t.p,{children:["The first thing to do is to add a hook to your custom pump into Pioreactor's software. To do this, we attach new functions to a dosing automation that are invoked when ",(0,i.jsx)(t.code,{children:"execute_io_action"})," is called. These functions will call your logic that runs the external pump. Specifically, if we wish to overwrite the ",(0,i.jsx)(t.code,{children:"media"})," pump, we create a function called ",(0,i.jsx)(t.code,{children:"add_media_to_bioreactor"}),", with signature"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"(cls, ml: float, unit: str, experiment: str, source_of_event: str, mqtt_client: pioreactor.pubsub.Client) -> float)\n"})}),"\n",(0,i.jsx)(t.p,{children:"To see this in an example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:"{10-16}",children:'from pioreactor.automations.dosing.base import DosingAutomationJob\n\nclass CustomPumper(DosingAutomationJob):\n\n    automation_name = "custom_pumper"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n    def add_media_to_bioreactor(self, ml: float, unit: str, experiment: str, source_of_event: str, mqtt_client) -> float:\n        # overrides the built in add_media_to_bioreactor\n        # add your custom logic here. Example could be interfacing with i2c, serial, PWM, etc.\n        ...\n        pwm = PWM(...)\n        self.logger.info(f"pumping {ml}")\n        return ml\n\n    def execute(self):\n        self.execute_io_action(media_ml=1.0, waste_ml=1.0)\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Whenever ",(0,i.jsx)(t.code,{children:"execute_io_action"})," is called upon to add media, the custom function ",(0,i.jsx)(t.code,{children:"add_media_to_bioreactor"})," is invoked. Similar logic applies to ",(0,i.jsx)(t.code,{children:"alt_media"}),". Overriding ",(0,i.jsx)(t.code,{children:"waste"})," uses a different name, as the next example shows:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:"{15-18}",children:'class CustomPumper(DosingAutomationJob):\n\n    automation_name = "custom_pumper"\n\n    def add_media_to_bioreactor(self, ml: float, unit: str, experiment: str, source_of_event: str, mqtt_client) -> float:\n        # overrides the built in add_media_to_bioreactor\n        ...\n        return ml\n\n    def add_alt_media_to_bioreactor(self, ml: float, unit: str, experiment: str, source_of_event: str, mqtt_client) -> float:\n        # overrides the built in remove_waste_from_bioreactor\n        ...\n        return ml\n\n    def remove_waste_from_bioreactor(self, ml: float, unit: str, experiment: str, source_of_event: str, mqtt_client) -> float:\n        # overrides the built in remove_waste_from_bioreactor\n        ...\n        return ml\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n    def execute(self):\n        self.execute_io_action(media_ml=1.0, alt_media_ml=1.0, waste_ml=2.0)\n\n'})}),"\n",(0,i.jsx)(t.h3,{id:"adding-additional-pumps-beyond-media-and-alt-media",children:"Adding additional pumps beyond media and alt-media"}),"\n",(0,i.jsxs)(t.p,{children:["In general, we can use this same pattern to add even more pumps to the Pioreactor software, beyond media and alt-media. Let's say we have a third pump, salty-media, that we wish to also use along with media and alt-media. We define the function ",(0,i.jsx)(t.code,{children:"add_salty_media_to_bioreactor"})," with the same signature above:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:"{5-8}",children:'class ThreePumps(DosingAutomationJob):\n\n    automation_name = "three_pumps"\n\n    def add_salty_media_to_bioreactor(self, ml: float, unit: str, experiment: str, source_of_event: str, mqtt_client) -> float:\n        # call an external pump, via i2c, serial, GPIO, etc.,\n        # or pumping_functions.add_salt_media\n        ...\n        return ml\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n'})}),"\n",(0,i.jsxs)(t.p,{children:["With this function defined, we can invoke ",(0,i.jsx)(t.code,{children:"execute_io_action"})," with an additional kwarg, ",(0,i.jsx)(t.code,{children:"salty_media_ml"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"    def execute(self):\n        results = self.execute_io_action(waste_ml=3.0, media_ml=1.0, alt_media_ml=1.0, salty_media_ml=1.0)\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Notice the ",(0,i.jsx)(t.code,{children:"salty_media_ml=1.0"}),' kwarg: this represents how much salty-media volume to add (your pump is responsible to dosing the correct volume). (Note in the above example, media and alt-media are not overwritten, so would use the "traditional" peristaltic pump system provided.)']}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["In general, ",(0,i.jsx)(t.code,{children:"execute_io_action"})," will try to call a function called ",(0,i.jsx)(t.code,{children:"add_<name>_to_bioreactor"})," if provided with a kwarg ",(0,i.jsx)(t.code,{children:"<name>_ml"}),"."]})})]})}function c(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>s});var i=n(67294);const o={},a=i.createContext(o);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);